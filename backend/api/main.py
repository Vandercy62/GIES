"""
SISTEMA ERP PRIMOTEX - API PRINCIPAL
====================================

API FastAPI principal do Sistema ERP Primotex.
Centraliza todos os endpoints e configura√ß√µes da aplica√ß√£o.

Autor: GitHub Copilot
Data: 29/10/2025
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
import logging
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o de seguran√ßa
security = HTTPBearer()

# Criar inst√¢ncia FastAPI
app = FastAPI(
    title="Sistema ERP Primotex",
    description="""
    Sistema de Gerenciamento Empresarial Integrado
    
    **Primotex - Forros e Divis√≥rias Eireli**
    
    Este sistema oferece controle completo sobre:
    - üë• Cadastros (Clientes, Fornecedores, Colaboradores, Produtos)
    - ‚öôÔ∏è Fluxo Operacional (OS completa com 7 fases)
    - üì¶ Controle de Estoque
    - üí∞ Gest√£o Financeira
    - üì± Comunica√ß√£o Autom√°tica
    - üìä Relat√≥rios e Dashboards
    
    **Fase Atual:** 1 - Funda√ß√£o (Desenvolvimento)
    """,
    version="1.0.0",
    contact={
        "name": "Primotex - Forros e Divis√≥rias Eireli",
        "email": "contato@primotex.com.br",
    }
)

# Evento de startup para inicializar banco de dados
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Iniciando Sistema ERP Primotex...")
    logger.info("üìä Conectando ao banco de dados...")
    try:
        from backend.database.config import engine
        from backend.models import create_all_tables
        success = create_all_tables(engine)
        if success:
            logger.info("‚úÖ Banco de dados inicializado com sucesso!")
        else:
            logger.error("‚ùå Erro ao inicializar banco de dados")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no banco de dados: {e}")

# Configurar CORS para permitir acesso do frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios exatos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =======================================
# ROTAS PRINCIPAIS
# =======================================

@app.get("/", tags=["Sistema"])
async def root():
    """Rota principal - Informa√ß√µes do sistema"""
    return {
        "sistema": "ERP Primotex",
        "empresa": "Primotex - Forros e Divis√≥rias Eireli",
        "versao": "1.0.0",
        "status": "FASE 1 - Funda√ß√£o em desenvolvimento",
        "data_inicio": "29/10/2025",
        "modulos": [
            "Administra√ß√£o",
            "Cadastros", 
            "Fluxo Operacional",
            "Estoque",
            "Financeiro",
            "Vendas/Compras",
            "Agendamento",
            "Comunica√ß√£o",
            "Relat√≥rios",
            "Configura√ß√µes"
        ],
        "endpoints_disponiveis": [
            "/docs - Documenta√ß√£o da API",
            "/redoc - Documenta√ß√£o alternativa",
            "/health - Status do sistema",
            "/api/v1/* - Endpoints da API"
        ]
    }

@app.get("/health", tags=["Sistema"])
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema"""
    try:
        return {
            "status": "healthy",
            "timestamp": "2025-10-29T00:00:00Z",
            "database": "connected",  # Ser√° implementado
            "services": {
                "auth": "active",
                "cadastros": "active",
                "os": "active",
                "financeiro": "active",
                "estoque": "active"
            }
        }
    except Exception as e:
        return {"status": "error", "detail": str(e)}

# =======================================
# MIDDLEWARE DE AUTENTICA√á√ÉO (FUTURO)
# =======================================

async def get_current_user(token: str = Depends(security)):
    """Middleware de autentica√ß√£o - ser√° implementado na Fase 1"""
    # Por enquanto, retorna usu√°rio mock
    return {
        "id": 1,
        "username": "admin",
        "email": "admin@primotex.com.br",
        "perfil": "Administrador",
        "ativo": True
    }

@app.get("/api/v1/auth/me", tags=["Autentica√ß√£o"])
async def get_user_info(current_user: dict = Depends(get_current_user)):
    """Informa√ß√µes do usu√°rio atual"""
    return current_user

# =======================================
# INCLUIR ROUTERS DOS M√ìDULOS
# =======================================

from backend.api.routers.clientes_router import router as clientes_router
from backend.api.routers.auth_router import router as auth_router
from backend.api.routers.ordem_servico_router import router as ordem_servico_router
from backend.api.routers.agendamento_router import router as agendamento_router
from backend.api.routers.financeiro_router_simples import router as financeiro_router

# Incluir router de autentica√ß√£o
app.include_router(auth_router, prefix="/api/v1", tags=["Autentica√ß√£o"])

# Incluir router de clientes
app.include_router(clientes_router, prefix="/api/v1", tags=["Clientes"])

# Incluir router de ordem de servi√ßo (NOVO - Fase 3)
app.include_router(ordem_servico_router, tags=["Ordem de Servi√ßo"])

# Incluir router de agendamento (NOVO - Fase 3)
app.include_router(agendamento_router, tags=["Agendamento"])

# Incluir router financeiro (NOVO - Fase 3)
app.include_router(financeiro_router, tags=["Financeiro"])

# Incluir router de comunica√ß√£o (NOVO - Fase 3)
from backend.api.routers.comunicacao_router import router as comunicacao_router
app.include_router(comunicacao_router, prefix="/api/v1", tags=["Comunica√ß√£o"])

# =======================================
# ENDPOINTS MOCK PARA DESENVOLVIMENTO
# =======================================

@app.get("/api/v1/cadastros/clientes", tags=["Cadastros"])
async def listar_clientes():
    """Mock - Lista de clientes para desenvolvimento"""
    return [
        {
            "id": 1,
            "nome": "Jo√£o Silva Constru√ß√µes LTDA",
            "tipo": "Jur√≠dica",
            "cnpj": "12.345.678/0001-90",
            "telefone": "(16) 3333-4444",
            "email": "contato@joaosilva.com.br",
            "status": "Ativo"
        },
        {
            "id": 2,
            "nome": "Maria Santos",
            "tipo": "F√≠sica",
            "cpf": "123.456.789-00",
            "telefone": "(16) 99999-8888",
            "email": "maria.santos@email.com",
            "status": "Ativo"
        }
    ]

@app.get("/api/v1/os/resumo", tags=["Ordem de Servi√ßo"])
async def resumo_os():
    """Mock - Resumo das OSs para dashboard"""
    return {
        "total": 45,
        "aguardando_visita": 5,
        "aguardando_orcamento": 8,
        "aguardando_aprovacao": 12,
        "em_execucao": 15,
        "concluidas_mes": 5
    }

@app.get("/api/v1/financeiro/resumo", tags=["Financeiro"])
async def resumo_financeiro():
    """Mock - Resumo financeiro para dashboard"""
    return {
        "contas_receber_hoje": 2500.00,
        "contas_pagar_hoje": 1200.00,
        "saldo_caixa": 15000.00,
        "faturamento_mes": 45000.00,
        "contas_vencidas": 3
    }

# Removi o bloco if __name__ == "__main__" que estava causando conflito
# Para executar o servidor, use: uvicorn backend.api.main:app --host 127.0.0.1 --port 8002