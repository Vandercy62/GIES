"""
TESTE DE INTEGRA√á√ÉO - INTERFACE AGENDAMENTO
===========================================

Sistema ERP Primotex - Teste completo da interface tkinter de Agendamento
Valida√ß√£o da integra√ß√£o com backend FastAPI (17 endpoints)

Caracter√≠sticas testadas:
- Conex√£o com API
- Calend√°rio interativo
- CRUD completo de eventos
- Sistema de conflitos
- Consulta de disponibilidade
- Interface responsiva
- Tratamento de erros

Autor: GitHub Copilot  
Data: 29/10/2025
"""

import tkinter as tk
import requests
import json
import time
import sys
import os
from datetime import datetime, date

# Adicionar caminho para imports
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from agendamento_window import AgendamentoWindow
except ImportError as e:
    print(f"‚ùå Erro ao importar AgendamentoWindow: {e}")
    sys.exit(1)

class TestAgendamentoIntegration:
    """Classe de teste para integra√ß√£o da interface de Agendamento"""
    
    def __init__(self):
        self.api_base_url = "http://127.0.0.1:8002/api/v1"
        self.errors = []
        self.successes = []
        
    def run_all_tests(self):
        """Executar todos os testes de integra√ß√£o"""
        print("üöÄ INICIANDO TESTES DE INTEGRA√á√ÉO - AGENDAMENTO")
        print("=" * 60)
        
        # Teste 1: Verificar importa√ß√£o
        self.test_import_module()
        
        # Teste 2: Verificar conex√£o com API
        self.test_api_connection()
        
        # Teste 3: Testar endpoints de agendamento
        self.test_agendamento_endpoints()
        
        # Teste 4: Testar interface gr√°fica
        self.test_gui_creation()
        
        # Teste 5: Testar calend√°rio
        self.test_calendar_functionality()
        
        # Teste 6: Testar componentes da interface
        self.test_gui_components()
        
        # Resumo dos testes
        self.print_test_summary()
        
        return len(self.errors) == 0
    
    def test_import_module(self):
        """Teste 1: Verificar importa√ß√£o do m√≥dulo"""
        print("\nüì¶ TESTE 1: Importa√ß√£o do M√≥dulo")
        print("-" * 40)
        
        try:
            # Verificar se a classe foi importada corretamente
            assert AgendamentoWindow is not None
            self.successes.append("‚úÖ Classe AgendamentoWindow importada com sucesso")
            
            # Verificar m√©todos principais
            required_methods = [
                'setup_window', 'create_widgets', 'create_calendario_panel',
                'novo_evento', 'salvar_evento', 'carregar_eventos_mes',
                'selecionar_data', 'create_calendar_grid'
            ]
            
            for method in required_methods:
                if hasattr(AgendamentoWindow, method):
                    self.successes.append(f"‚úÖ M√©todo {method} dispon√≠vel")
                else:
                    self.errors.append(f"‚ùå M√©todo {method} n√£o encontrado")
                    
        except Exception as e:
            self.errors.append(f"‚ùå Erro na importa√ß√£o: {e}")
        
        print(f"M√©todos verificados: {len(required_methods)}")
    
    def test_api_connection(self):
        """Teste 2: Verificar conex√£o com API"""
        print("\nüåê TESTE 2: Conex√£o com API")
        print("-" * 40)
        
        try:
            # Testar health check da API
            response = requests.get(f"{self.api_base_url}/agendamento/health", timeout=5)
            
            if response.status_code == 200:
                self.successes.append("‚úÖ API Agendamento health check OK")
            else:
                self.errors.append(f"‚ùå API health check falhou: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            self.errors.append("‚ùå N√£o foi poss√≠vel conectar com a API (verifique se o servidor est√° rodando)")
        except requests.exceptions.Timeout:
            self.errors.append("‚ùå Timeout na conex√£o com a API")
        except Exception as e:
            self.errors.append(f"‚ùå Erro inesperado na conex√£o: {e}")
        
        # Testar endpoint principal
        try:
            response = requests.get(f"{self.api_base_url}/agendamento/eventos", timeout=5)
            if response.status_code == 200:
                self.successes.append("‚úÖ Endpoint principal de eventos funcionando")
            elif response.status_code == 422:
                self.successes.append("‚úÖ Endpoint de eventos responde (422 - par√¢metros necess√°rios)")
            else:
                self.errors.append(f"‚ùå Endpoint principal retornou: {response.status_code}")
        except Exception as e:
            self.errors.append(f"‚ùå Erro no endpoint principal: {e}")
    
    def test_agendamento_endpoints(self):
        """Teste 3: Testar endpoints espec√≠ficos de agendamento"""
        print("\nüîó TESTE 3: Endpoints de Agendamento")
        print("-" * 40)
        
        endpoints_to_test = [
            ("/agendamento/eventos", "GET", "Lista de eventos"),
            ("/agendamento/configuracoes", "GET", "Configura√ß√µes"),
            ("/agendamento/tipos-evento", "GET", "Tipos de evento"),
            ("/agendamento/bloqueios", "GET", "Bloqueios"),
            ("/agendamento/estatisticas", "GET", "Estat√≠sticas")
        ]
        
        for endpoint, method, description in endpoints_to_test:
            try:
                if method == "GET":
                    response = requests.get(f"{self.api_base_url}{endpoint}", timeout=5)
                else:
                    continue  # Por enquanto apenas GET
                
                if response.status_code in [200, 404, 422]:  # C√≥digos v√°lidos
                    self.successes.append(f"‚úÖ {description}: {response.status_code}")
                else:
                    self.errors.append(f"‚ùå {description}: {response.status_code}")
                    
            except Exception as e:
                self.errors.append(f"‚ùå Erro em {description}: {e}")
        
        print(f"Endpoints testados: {len(endpoints_to_test)}")
    
    def test_gui_creation(self):
        """Teste 4: Testar cria√ß√£o da interface gr√°fica"""
        print("\nüñ•Ô∏è TESTE 4: Cria√ß√£o da Interface")
        print("-" * 40)
        
        try:
            # Criar inst√¢ncia da janela (sem mostrar)
            root = tk.Tk()
            root.withdraw()  # Esconder janela principal
            
            # Tentar criar a interface
            agendamento_window = AgendamentoWindow(parent=root)
            
            if agendamento_window.window:
                self.successes.append("‚úÖ Janela principal criada com sucesso")
            else:
                self.errors.append("‚ùå Falha ao criar janela principal")
            
            # Verificar se a janela tem o t√≠tulo correto
            if "Agendamento" in agendamento_window.window.title():
                self.successes.append("‚úÖ T√≠tulo da janela configurado corretamente")
            else:
                self.errors.append("‚ùå T√≠tulo da janela incorreto")
            
            # Verificar dimens√µes
            agendamento_window.window.update_idletasks()
            geometry = agendamento_window.window.geometry()
            if "1500x900" in geometry:
                self.successes.append("‚úÖ Dimens√µes da janela configuradas corretamente")
            else:
                self.errors.append(f"‚ùå Dimens√µes incorretas: {geometry}")
            
            # Fechar janela de teste
            agendamento_window.window.destroy()
            root.destroy()
            
        except Exception as e:
            self.errors.append(f"‚ùå Erro ao criar interface: {e}")
    
    def test_calendar_functionality(self):
        """Teste 5: Testar funcionalidade do calend√°rio"""
        print("\nüìÖ TESTE 5: Funcionalidade do Calend√°rio")
        print("-" * 40)
        
        try:
            # Criar inst√¢ncia para teste
            root = tk.Tk()
            root.withdraw()
            
            agendamento_window = AgendamentoWindow(parent=root)
            
            # Verificar atributos do calend√°rio
            calendar_attrs = [
                ('mes_atual', 'M√™s atual'),
                ('ano_atual', 'Ano atual'),
                ('data_selecionada', 'Data selecionada'),
                ('cal_buttons', 'Bot√µes do calend√°rio'),
                ('mes_ano_var', 'Vari√°vel m√™s/ano')
            ]
            
            for attr_name, description in calendar_attrs:
                if hasattr(agendamento_window, attr_name):
                    attr = getattr(agendamento_window, attr_name)
                    if attr is not None:
                        self.successes.append(f"‚úÖ {description} inicializado")
                    else:
                        self.errors.append(f"‚ùå {description} √© None")
                else:
                    self.errors.append(f"‚ùå {description} n√£o encontrado")
            
            # Testar m√©todos do calend√°rio
            calendar_methods = [
                'create_calendar_grid',
                'selecionar_data', 
                'mes_anterior',
                'proximo_mes',
                'ir_para_hoje'
            ]
            
            for method in calendar_methods:
                if hasattr(agendamento_window, method):
                    self.successes.append(f"‚úÖ M√©todo {method} dispon√≠vel")
                else:
                    self.errors.append(f"‚ùå M√©todo {method} n√£o encontrado")
            
            # Fechar janela de teste
            agendamento_window.window.destroy()
            root.destroy()
            
        except Exception as e:
            self.errors.append(f"‚ùå Erro ao testar calend√°rio: {e}")
    
    def test_gui_components(self):
        """Teste 6: Testar componentes da interface"""
        print("\nüß© TESTE 6: Componentes da Interface")
        print("-" * 40)
        
        try:
            # Criar inst√¢ncia para teste
            root = tk.Tk()
            root.withdraw()
            
            agendamento_window = AgendamentoWindow(parent=root)
            
            # Verificar componentes principais
            components_to_check = [
                ('notebook', 'Notebook de abas'),
                ('tree_eventos', 'Treeview de eventos'),
                ('cal_grid_frame', 'Frame do calend√°rio'),
                ('titulo_var', 'Campo t√≠tulo'),
                ('tipo_var', 'Campo tipo'),
                ('data_evento_var', 'Campo data evento'),
                ('status_text', 'Texto de status'),
                ('conexao_text', 'Texto de conex√£o')
            ]
            
            for attr_name, description in components_to_check:
                if hasattr(agendamento_window, attr_name):
                    attr = getattr(agendamento_window, attr_name)
                    if attr is not None:
                        self.successes.append(f"‚úÖ {description} criado")
                    else:
                        self.errors.append(f"‚ùå {description} √© None")
                else:
                    self.errors.append(f"‚ùå {description} n√£o encontrado")
            
            # Verificar se o notebook tem as abas corretas
            if hasattr(agendamento_window, 'notebook'):
                expected_tabs = 4  # Eventos, Evento Form, Disponibilidade, Conflitos
                actual_tabs = len(agendamento_window.notebook.tabs())
                if actual_tabs == expected_tabs:
                    self.successes.append(f"‚úÖ N√∫mero correto de abas: {actual_tabs}")
                else:
                    self.errors.append(f"‚ùå N√∫mero incorreto de abas: {actual_tabs}, esperado: {expected_tabs}")
            
            # Verificar calend√°rio
            if hasattr(agendamento_window, 'cal_buttons'):
                if isinstance(agendamento_window.cal_buttons, dict):
                    self.successes.append("‚úÖ Dicion√°rio de bot√µes do calend√°rio criado")
                    if len(agendamento_window.cal_buttons) > 0:
                        self.successes.append(f"‚úÖ Bot√µes do calend√°rio criados: {len(agendamento_window.cal_buttons)}")
                else:
                    self.errors.append("‚ùå cal_buttons n√£o √© um dicion√°rio")
            
            # Fechar janela de teste
            agendamento_window.window.destroy()
            root.destroy()
            
        except Exception as e:
            self.errors.append(f"‚ùå Erro ao verificar componentes: {e}")
    
    def print_test_summary(self):
        """Imprimir resumo dos testes"""
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS TESTES")
        print("=" * 60)
        
        print(f"\n‚úÖ SUCESSOS ({len(self.successes)}):")
        for success in self.successes:
            print(f"  {success}")
        
        if self.errors:
            print(f"\n‚ùå ERROS ({len(self.errors)}):")
            for error in self.errors:
                print(f"  {error}")
        
        print("\nüìà ESTAT√çSTICAS:")
        total_tests = len(self.successes) + len(self.errors)
        success_rate = (len(self.successes) / total_tests * 100) if total_tests > 0 else 0
        print(f"  Total de testes: {total_tests}")
        print(f"  Sucessos: {len(self.successes)}")
        print(f"  Erros: {len(self.errors)}")
        print(f"  Taxa de sucesso: {success_rate:.1f}%")
        
        if len(self.errors) == 0:
            print("\nüéâ TODOS OS TESTES PASSARAM! Interface de Agendamento pronta para uso.")
        else:
            print("\n‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.")
        
        print("\n" + "=" * 60)

def run_interactive_test():
    """Executar teste interativo da interface"""
    print("\nüñ•Ô∏è TESTE INTERATIVO DA INTERFACE")
    print("-" * 40)
    
    try:
        print("Criando interface de Agendamento...")
        
        # Criar e mostrar a interface
        app = AgendamentoWindow()
        
        print("‚úÖ Interface criada com sucesso!")
        print("üéØ Testando funcionalidades principais...")
        
        # Simular algumas opera√ß√µes
        print("  üìÖ Carregando dados mock...")
        app.carregar_dados_mock()
        
        print("  üÜï Testando novo evento...")
        app.novo_evento()
        
        print("  üìä Atualizando interface...")
        app.atualizar_interface()
        
        print("\n‚ú® Interface pronta! Voc√™ pode interagir com ela agora.")
        print("üí° Dica: Teste as seguintes funcionalidades:")
        print("  - Navegue pelo calend√°rio usando as setas")
        print("  - Clique em datas para selecionar")
        print("  - Use o bot√£o 'Hoje' para voltar √† data atual")
        print("  - Clique em 'Novo Evento' para criar eventos")
        print("  - Navegue pelas abas (Eventos, Evento, Disponibilidade, Conflitos)")
        print("  - Teste os menus de contexto (bot√£o direito)")
        
        # Iniciar loop da interface
        app.window.mainloop()
        
    except Exception as e:
        print(f"‚ùå Erro no teste interativo: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üß™ SISTEMA DE TESTES - INTERFACE AGENDAMENTO")
    print("Sistema ERP Primotex - Frontend Desktop")
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Executar testes autom√°ticos
    tester = TestAgendamentoIntegration()
    all_tests_passed = tester.run_all_tests()
    
    # Perguntar se quer executar teste interativo
    if all_tests_passed:
        print("\n" + "=" * 60)
        response = input("ü§î Deseja executar o teste interativo da interface? (s/n): ").lower()
        
        if response in ['s', 'sim', 'y', 'yes']:
            run_interactive_test()
        else:
            print("‚ú® Testes conclu√≠dos. Interface de Agendamento validada!")
    else:
        print("\n‚ö†Ô∏è Corrija os erros antes de executar o teste interativo.")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)