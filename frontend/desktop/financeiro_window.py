"""
INTERFACE DESKTOP - FINANCEIRO
==============================

Sistema ERP Primotex - Interface tkinter para gest√£o completa do Financeiro
Integra√ß√£o total com backend FastAPI - 14 endpoints sincronizados

Caracter√≠sticas:
- Gest√£o completa de contas a receber/pagar
- Dashboard financeiro em tempo real
- Controle de movimenta√ß√µes
- Categoriza√ß√£o autom√°tica
- Relat√≥rios financeiros detalhados
- Gr√°ficos e indicadores visuais
- Integra√ß√£o com OS e agendamento
- Interface moderna e responsiva

Autor: GitHub Copilot
Data: 29/10/2025
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, date, timedelta
import requests
import json
import threading
from typing import Dict, List, Optional, Any
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FinanceiroWindow:
    """Interface principal para gest√£o Financeira"""
    
    def __init__(self, parent=None):
        self.parent = parent
        self.api_base_url = "http://127.0.0.1:8002/api/v1"
        self.token = None
        
        # Dados financeiros
        self.conta_atual = None
        self.lista_contas_receber = []
        self.lista_contas_pagar = []
        self.lista_movimentacoes = []
        self.lista_categorias = []
        self.dashboard_data = {}
        
        # Estado da interface
        self.loading = False
        self.filtros_ativos = {}
        
        # Configurar janela principal
        self.setup_window()
        
        # Configurar estilos
        self.setup_styles()
        
        # Criar interface
        self.create_widgets()
        
        # Carregar dados iniciais
        self.carregar_dados_iniciais()
    
    def setup_window(self):
        """Configurar janela principal"""
        self.window = tk.Toplevel(self.parent) if self.parent else tk.Tk()
        self.window.title("ERP Primotex - Sistema Financeiro")
        self.window.geometry("1400x900")
        self.window.minsize(1200, 800)
        
        # Centralizar janela
        self.window.update_idletasks()
        x = (self.window.winfo_screenwidth() // 2) - (1400 // 2)
        y = (self.window.winfo_screenheight() // 2) - (900 // 2)
        self.window.geometry(f"1400x900+{x}+{y}")
        
        # Configurar fechamento
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_styles(self):
        """Configurar estilos da interface"""
        self.style = ttk.Style()
        
        # Configurar tema
        available_themes = self.style.theme_names()
        if 'clam' in available_themes:
            self.style.theme_use('clam')
        
        # Cores do sistema
        self.cores = {
            'primaria': '#2E86AB',      # Azul prim√°rio
            'secundaria': '#A23B72',    # Rosa secund√°rio  
            'sucesso': '#28A745',       # Verde sucesso
            'aviso': '#FFC107',         # Amarelo aviso
            'perigo': '#DC3545',        # Vermelho perigo
            'info': '#17A2B8',          # Azul info
            'claro': '#F8F9FA',         # Cinza claro
            'escuro': '#343A40',        # Cinza escuro
            'receita': '#28A745',       # Verde receita
            'despesa': '#DC3545'        # Vermelho despesa
        }
        
        # Estilos customizados
        self.style.configure('Titulo.TLabel', 
                           font=('Arial', 16, 'bold'),
                           foreground=self.cores['primaria'])
        
        self.style.configure('Subtitulo.TLabel',
                           font=('Arial', 12, 'bold'),
                           foreground=self.cores['escuro'])
        
        self.style.configure('Receita.TLabel',
                           font=('Arial', 12, 'bold'),
                           foreground=self.cores['receita'])
        
        self.style.configure('Despesa.TLabel',
                           font=('Arial', 12, 'bold'),
                           foreground=self.cores['despesa'])
        
        self.style.configure('Valor.TLabel',
                           font=('Arial', 11, 'bold'))
    
    def create_widgets(self):
        """Criar todos os widgets da interface"""
        # Frame principal
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # T√≠tulo principal
        titulo_frame = ttk.Frame(main_frame)
        titulo_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        titulo_frame.columnconfigure(0, weight=1)
        
        ttk.Label(titulo_frame, text="üí∞ Sistema Financeiro", 
                 style='Titulo.TLabel').grid(row=0, column=0, sticky=tk.W)
        
        # Bot√µes de a√ß√£o principais
        btn_frame = ttk.Frame(titulo_frame)
        btn_frame.grid(row=0, column=1, sticky=tk.E)
        
        ttk.Button(btn_frame, text="üìà Dashboard", 
                  command=self.abrir_dashboard).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚ûï Nova Conta", 
                  command=self.nova_conta).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üìä Relat√≥rios", 
                  command=self.gerar_relatorios).pack(side=tk.LEFT)
        
        # Notebook principal
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Aba 1: Dashboard
        self.create_aba_dashboard()
        
        # Aba 2: Contas a Receber
        self.create_aba_contas_receber()
        
        # Aba 3: Contas a Pagar
        self.create_aba_contas_pagar()
        
        # Aba 4: Movimenta√ß√µes
        self.create_aba_movimentacoes()
        
        # Aba 5: Categorias
        self.create_aba_categorias()
        
        # Barra de status
        self.create_status_bar(main_frame)
    
    def create_aba_dashboard(self):
        """Criar aba do dashboard financeiro"""
        aba_dashboard = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(aba_dashboard, text="üìà Dashboard")
        
        # Configurar grid
        aba_dashboard.columnconfigure(0, weight=1)
        aba_dashboard.columnconfigure(1, weight=1)
        aba_dashboard.rowconfigure(1, weight=1)
        
        # Resumo financeiro
        resumo_frame = ttk.LabelFrame(aba_dashboard, text="üíµ Resumo Financeiro", padding="10")
        resumo_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        resumo_frame.columnconfigure(0, weight=1)
        resumo_frame.columnconfigure(1, weight=1)
        resumo_frame.columnconfigure(2, weight=1)
        resumo_frame.columnconfigure(3, weight=1)
        
        # Cards de resumo
        self.create_card_resumo(resumo_frame, "üí∞ Receitas", "R$ 0,00", 
                               self.cores['receita'], 0, 0)
        self.create_card_resumo(resumo_frame, "üí∏ Despesas", "R$ 0,00", 
                               self.cores['despesa'], 0, 1)
        self.create_card_resumo(resumo_frame, "üìä Saldo", "R$ 0,00", 
                               self.cores['info'], 0, 2)
        self.create_card_resumo(resumo_frame, "‚è∞ Em Aberto", "R$ 0,00", 
                               self.cores['aviso'], 0, 3)
        
        # Painel esquerdo - Contas em destaque
        contas_frame = ttk.LabelFrame(aba_dashboard, text="üéØ Contas em Destaque", padding="10")
        contas_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        contas_frame.columnconfigure(0, weight=1)
        contas_frame.rowconfigure(1, weight=1)
        
        # Filtros de destaque
        filtro_destaque_frame = ttk.Frame(contas_frame)
        filtro_destaque_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(filtro_destaque_frame, text="Mostrar:").pack(side=tk.LEFT)
        
        self.destaque_var = tk.StringVar(value="vencidas")
        destaque_combo = ttk.Combobox(filtro_destaque_frame, textvariable=self.destaque_var, width=15)
        destaque_combo['values'] = ('vencidas', 'vencendo_hoje', 'vencendo_semana', 'maiores_valores')
        destaque_combo.pack(side=tk.LEFT, padx=(5, 0))
        destaque_combo.bind('<<ComboboxSelected>>', self.atualizar_contas_destaque)
        
        # Lista de contas em destaque
        cols_destaque = ('tipo', 'descricao', 'valor', 'vencimento', 'status')
        self.tree_destaque = ttk.Treeview(contas_frame, columns=cols_destaque, 
                                        show='headings', height=12)
        
        self.tree_destaque.heading('tipo', text='Tipo')
        self.tree_destaque.heading('descricao', text='Descri√ß√£o')
        self.tree_destaque.heading('valor', text='Valor')
        self.tree_destaque.heading('vencimento', text='Vencimento')
        self.tree_destaque.heading('status', text='Status')
        
        # Configurar larguras
        self.tree_destaque.column('tipo', width=80)
        self.tree_destaque.column('descricao', width=200)
        self.tree_destaque.column('valor', width=100)
        self.tree_destaque.column('vencimento', width=100)
        self.tree_destaque.column('status', width=80)
        
        # Scrollbar
        scroll_destaque = ttk.Scrollbar(contas_frame, orient=tk.VERTICAL, 
                                      command=self.tree_destaque.yview)
        self.tree_destaque.configure(yscrollcommand=scroll_destaque.set)
        
        self.tree_destaque.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scroll_destaque.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        # Painel direito - Gr√°ficos e an√°lises
        graficos_frame = ttk.LabelFrame(aba_dashboard, text="üìä An√°lises", padding="10")
        graficos_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        graficos_frame.columnconfigure(0, weight=1)
        graficos_frame.rowconfigure(1, weight=1)
        
        # Per√≠odo de an√°lise
        periodo_frame = ttk.Frame(graficos_frame)
        periodo_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(periodo_frame, text="Per√≠odo:").pack(side=tk.LEFT)
        
        self.periodo_var = tk.StringVar(value="mes_atual")
        periodo_combo = ttk.Combobox(periodo_frame, textvariable=self.periodo_var, width=15)
        periodo_combo['values'] = ('mes_atual', 'mes_anterior', 'trimestre', 'semestre', 'ano')
        periodo_combo.pack(side=tk.LEFT, padx=(5, 0))
        periodo_combo.bind('<<ComboboxSelected>>', self.atualizar_graficos)
        
        # √Årea de gr√°ficos (simulado com texto)
        self.graficos_text = tk.Text(graficos_frame, wrap=tk.WORD, state='disabled')
        self.graficos_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Scrollbar para gr√°ficos
        scroll_graficos = ttk.Scrollbar(graficos_frame, orient=tk.VERTICAL, 
                                      command=self.graficos_text.yview)
        self.graficos_text.configure(yscrollcommand=scroll_graficos.set)
        scroll_graficos.grid(row=1, column=1, sticky=(tk.N, tk.S))
    
    def create_card_resumo(self, parent, titulo, valor, cor, row, col):
        """Criar card de resumo"""
        card_frame = ttk.Frame(parent, relief='solid', borderwidth=1)
        card_frame.grid(row=row, column=col, sticky=(tk.W, tk.E), padx=5, pady=5)
        card_frame.columnconfigure(0, weight=1)
        
        # T√≠tulo
        ttk.Label(card_frame, text=titulo, style='Subtitulo.TLabel').grid(
            row=0, column=0, pady=(10, 5))
        
        # Valor
        valor_var = tk.StringVar(value=valor)
        valor_label = ttk.Label(card_frame, textvariable=valor_var, 
                               font=('Arial', 16, 'bold'), foreground=cor)
        valor_label.grid(row=1, column=0, pady=(0, 10))
        
        # Armazenar refer√™ncia para atualiza√ß√£o
        setattr(self, f"valor_{titulo.lower().replace(' ', '_').replace('üí∞', '').replace('üí∏', '').replace('üìä', '').replace('‚è∞', '').strip()}_var", valor_var)
    
    def create_aba_contas_receber(self):
        """Criar aba de contas a receber"""
        aba_receber = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(aba_receber, text="üí∞ Contas a Receber")
        
        # Configurar grid
        aba_receber.columnconfigure(0, weight=1)
        aba_receber.rowconfigure(2, weight=1)
        
        # Cabe√ßalho com filtros
        filtros_receber_frame = ttk.LabelFrame(aba_receber, text="üîç Filtros", padding="10")
        filtros_receber_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        filtros_receber_frame.columnconfigure(2, weight=1)
        
        # Filtros
        ttk.Label(filtros_receber_frame, text="Status:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.status_receber_var = tk.StringVar()
        status_combo = ttk.Combobox(filtros_receber_frame, textvariable=self.status_receber_var, width=12)
        status_combo['values'] = ('Todos', 'PENDENTE', 'PAGO', 'VENCIDO', 'CANCELADO')
        status_combo.set('Todos')
        status_combo.grid(row=0, column=1, padx=(0, 10))
        
        ttk.Label(filtros_receber_frame, text="Per√≠odo:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        self.periodo_receber_var = tk.StringVar()
        periodo_combo = ttk.Combobox(filtros_receber_frame, textvariable=self.periodo_receber_var, width=12)
        periodo_combo['values'] = ('Todos', 'Hoje', 'Esta Semana', 'Este M√™s', 'Personalizado')
        periodo_combo.set('Este M√™s')
        periodo_combo.grid(row=0, column=3, padx=(0, 10))
        
        ttk.Button(filtros_receber_frame, text="üîç Filtrar", 
                  command=self.aplicar_filtros_receber).grid(row=0, column=4)
        
        # Bot√µes de a√ß√£o
        acoes_receber_frame = ttk.Frame(aba_receber)
        acoes_receber_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Button(acoes_receber_frame, text="‚ûï Nova Conta", 
                  command=self.nova_conta_receber).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_receber_frame, text="‚úÖ Marcar como Pago", 
                  command=self.marcar_como_pago).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_receber_frame, text="üìß Enviar Cobran√ßa", 
                  command=self.enviar_cobranca).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_receber_frame, text="üîÑ Atualizar", 
                  command=self.atualizar_contas_receber).pack(side=tk.LEFT)
        
        # Lista de contas a receber
        lista_receber_frame = ttk.Frame(aba_receber)
        lista_receber_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        lista_receber_frame.columnconfigure(0, weight=1)
        lista_receber_frame.rowconfigure(0, weight=1)
        
        # Treeview
        cols_receber = ('id', 'cliente', 'descricao', 'valor', 'vencimento', 'status', 'categoria')
        self.tree_receber = ttk.Treeview(lista_receber_frame, columns=cols_receber, 
                                       show='headings', height=15)
        
        # Configurar cabe√ßalhos
        self.tree_receber.heading('id', text='ID')
        self.tree_receber.heading('cliente', text='Cliente')
        self.tree_receber.heading('descricao', text='Descri√ß√£o')
        self.tree_receber.heading('valor', text='Valor')
        self.tree_receber.heading('vencimento', text='Vencimento')
        self.tree_receber.heading('status', text='Status')
        self.tree_receber.heading('categoria', text='Categoria')
        
        # Configurar larguras
        self.tree_receber.column('id', width=50, anchor='center')
        self.tree_receber.column('cliente', width=150)
        self.tree_receber.column('descricao', width=200)
        self.tree_receber.column('valor', width=100, anchor='e')
        self.tree_receber.column('vencimento', width=100, anchor='center')
        self.tree_receber.column('status', width=100, anchor='center')
        self.tree_receber.column('categoria', width=120)
        
        # Scrollbars
        v_scroll_receber = ttk.Scrollbar(lista_receber_frame, orient=tk.VERTICAL, 
                                       command=self.tree_receber.yview)
        h_scroll_receber = ttk.Scrollbar(lista_receber_frame, orient=tk.HORIZONTAL, 
                                       command=self.tree_receber.xview)
        
        self.tree_receber.configure(yscrollcommand=v_scroll_receber.set,
                                  xscrollcommand=h_scroll_receber.set)
        
        # Grid
        self.tree_receber.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scroll_receber.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scroll_receber.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # Eventos
        self.tree_receber.bind('<<TreeviewSelect>>', self.on_conta_receber_selected)
        self.tree_receber.bind('<Double-1>', self.editar_conta_receber)
    
    def create_aba_contas_pagar(self):
        """Criar aba de contas a pagar"""
        aba_pagar = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(aba_pagar, text="üí∏ Contas a Pagar")
        
        # Configurar grid (similar √† aba de receber)
        aba_pagar.columnconfigure(0, weight=1)
        aba_pagar.rowconfigure(2, weight=1)
        
        # Filtros
        filtros_pagar_frame = ttk.LabelFrame(aba_pagar, text="üîç Filtros", padding="10")
        filtros_pagar_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        filtros_pagar_frame.columnconfigure(2, weight=1)
        
        ttk.Label(filtros_pagar_frame, text="Status:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.status_pagar_var = tk.StringVar()
        status_pagar_combo = ttk.Combobox(filtros_pagar_frame, textvariable=self.status_pagar_var, width=12)
        status_pagar_combo['values'] = ('Todos', 'PENDENTE', 'PAGO', 'VENCIDO', 'CANCELADO')
        status_pagar_combo.set('Todos')
        status_pagar_combo.grid(row=0, column=1, padx=(0, 10))
        
        ttk.Label(filtros_pagar_frame, text="Per√≠odo:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        self.periodo_pagar_var = tk.StringVar()
        periodo_pagar_combo = ttk.Combobox(filtros_pagar_frame, textvariable=self.periodo_pagar_var, width=12)
        periodo_pagar_combo['values'] = ('Todos', 'Hoje', 'Esta Semana', 'Este M√™s', 'Personalizado')
        periodo_pagar_combo.set('Este M√™s')
        periodo_pagar_combo.grid(row=0, column=3, padx=(0, 10))
        
        ttk.Button(filtros_pagar_frame, text="üîç Filtrar", 
                  command=self.aplicar_filtros_pagar).grid(row=0, column=4)
        
        # Bot√µes de a√ß√£o
        acoes_pagar_frame = ttk.Frame(aba_pagar)
        acoes_pagar_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Button(acoes_pagar_frame, text="‚ûï Nova Conta", 
                  command=self.nova_conta_pagar).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_pagar_frame, text="‚úÖ Marcar como Pago", 
                  command=self.marcar_como_pago_pagar).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_pagar_frame, text="üìÖ Agendar Pagamento", 
                  command=self.agendar_pagamento).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_pagar_frame, text="üîÑ Atualizar", 
                  command=self.atualizar_contas_pagar).pack(side=tk.LEFT)
        
        # Lista de contas a pagar
        lista_pagar_frame = ttk.Frame(aba_pagar)
        lista_pagar_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        lista_pagar_frame.columnconfigure(0, weight=1)
        lista_pagar_frame.rowconfigure(0, weight=1)
        
        # Treeview
        cols_pagar = ('id', 'fornecedor', 'descricao', 'valor', 'vencimento', 'status', 'categoria')
        self.tree_pagar = ttk.Treeview(lista_pagar_frame, columns=cols_pagar, 
                                     show='headings', height=15)
        
        # Configurar cabe√ßalhos
        self.tree_pagar.heading('id', text='ID')
        self.tree_pagar.heading('fornecedor', text='Fornecedor')
        self.tree_pagar.heading('descricao', text='Descri√ß√£o')
        self.tree_pagar.heading('valor', text='Valor')
        self.tree_pagar.heading('vencimento', text='Vencimento')
        self.tree_pagar.heading('status', text='Status')
        self.tree_pagar.heading('categoria', text='Categoria')
        
        # Configurar larguras
        self.tree_pagar.column('id', width=50, anchor='center')
        self.tree_pagar.column('fornecedor', width=150)
        self.tree_pagar.column('descricao', width=200)
        self.tree_pagar.column('valor', width=100, anchor='e')
        self.tree_pagar.column('vencimento', width=100, anchor='center')
        self.tree_pagar.column('status', width=100, anchor='center')
        self.tree_pagar.column('categoria', width=120)
        
        # Scrollbars
        v_scroll_pagar = ttk.Scrollbar(lista_pagar_frame, orient=tk.VERTICAL, 
                                     command=self.tree_pagar.yview)
        h_scroll_pagar = ttk.Scrollbar(lista_pagar_frame, orient=tk.HORIZONTAL, 
                                     command=self.tree_pagar.xview)
        
        self.tree_pagar.configure(yscrollcommand=v_scroll_pagar.set,
                                xscrollcommand=h_scroll_pagar.set)
        
        # Grid
        self.tree_pagar.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scroll_pagar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scroll_pagar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # Eventos
        self.tree_pagar.bind('<<TreeviewSelect>>', self.on_conta_pagar_selected)
        self.tree_pagar.bind('<Double-1>', self.editar_conta_pagar)
    
    def create_aba_movimentacoes(self):
        """Criar aba de movimenta√ß√µes"""
        aba_mov = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(aba_mov, text="üìä Movimenta√ß√µes")
        
        # Configurar grid
        aba_mov.columnconfigure(0, weight=1)
        aba_mov.rowconfigure(2, weight=1)
        
        # Filtros e resumo
        filtros_mov_frame = ttk.LabelFrame(aba_mov, text="üîç Filtros e Resumo", padding="10")
        filtros_mov_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        filtros_mov_frame.columnconfigure(3, weight=1)
        
        # Filtros
        ttk.Label(filtros_mov_frame, text="Tipo:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.tipo_mov_var = tk.StringVar()
        tipo_mov_combo = ttk.Combobox(filtros_mov_frame, textvariable=self.tipo_mov_var, width=12)
        tipo_mov_combo['values'] = ('Todos', 'RECEITA', 'DESPESA')
        tipo_mov_combo.set('Todos')
        tipo_mov_combo.grid(row=0, column=1, padx=(0, 10))
        
        ttk.Label(filtros_mov_frame, text="Per√≠odo:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        self.periodo_mov_var = tk.StringVar()
        periodo_mov_combo = ttk.Combobox(filtros_mov_frame, textvariable=self.periodo_mov_var, width=12)
        periodo_mov_combo['values'] = ('Este M√™s', 'M√™s Anterior', 'Trimestre', 'Semestre', 'Ano')
        periodo_mov_combo.set('Este M√™s')
        periodo_mov_combo.grid(row=0, column=3, padx=(0, 10))
        
        ttk.Button(filtros_mov_frame, text="üîç Filtrar", 
                  command=self.aplicar_filtros_movimentacoes).grid(row=0, column=4)
        
        # Resumo das movimenta√ß√µes
        resumo_mov_frame = ttk.Frame(filtros_mov_frame)
        resumo_mov_frame.grid(row=1, column=0, columnspan=5, sticky=(tk.W, tk.E), pady=(10, 0))
        resumo_mov_frame.columnconfigure(0, weight=1)
        resumo_mov_frame.columnconfigure(1, weight=1)
        resumo_mov_frame.columnconfigure(2, weight=1)
        
        # Cards de resumo movimenta√ß√µes
        self.create_card_movimentacao(resumo_mov_frame, "üí∞ Total Receitas", "R$ 0,00", 
                                     self.cores['receita'], 0, 0)
        self.create_card_movimentacao(resumo_mov_frame, "üí∏ Total Despesas", "R$ 0,00", 
                                     self.cores['despesa'], 0, 1)
        self.create_card_movimentacao(resumo_mov_frame, "üìä Saldo L√≠quido", "R$ 0,00", 
                                     self.cores['info'], 0, 2)
        
        # Bot√µes de a√ß√£o
        acoes_mov_frame = ttk.Frame(aba_mov)
        acoes_mov_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Button(acoes_mov_frame, text="‚ûï Nova Movimenta√ß√£o", 
                  command=self.nova_movimentacao).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_mov_frame, text="üì§ Exportar", 
                  command=self.exportar_movimentacoes).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(acoes_mov_frame, text="üîÑ Atualizar", 
                  command=self.atualizar_movimentacoes).pack(side=tk.LEFT)
        
        # Lista de movimenta√ß√µes
        lista_mov_frame = ttk.Frame(aba_mov)
        lista_mov_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        lista_mov_frame.columnconfigure(0, weight=1)
        lista_mov_frame.rowconfigure(0, weight=1)
        
        # Treeview
        cols_mov = ('data', 'tipo', 'descricao', 'categoria', 'valor', 'conta', 'observacoes')
        self.tree_movimentacoes = ttk.Treeview(lista_mov_frame, columns=cols_mov, 
                                             show='headings', height=15)
        
        # Configurar cabe√ßalhos
        self.tree_movimentacoes.heading('data', text='Data')
        self.tree_movimentacoes.heading('tipo', text='Tipo')
        self.tree_movimentacoes.heading('descricao', text='Descri√ß√£o')
        self.tree_movimentacoes.heading('categoria', text='Categoria')
        self.tree_movimentacoes.heading('valor', text='Valor')
        self.tree_movimentacoes.heading('conta', text='Conta')
        self.tree_movimentacoes.heading('observacoes', text='Observa√ß√µes')
        
        # Configurar larguras
        self.tree_movimentacoes.column('data', width=100, anchor='center')
        self.tree_movimentacoes.column('tipo', width=80, anchor='center')
        self.tree_movimentacoes.column('descricao', width=200)
        self.tree_movimentacoes.column('categoria', width=120)
        self.tree_movimentacoes.column('valor', width=100, anchor='e')
        self.tree_movimentacoes.column('conta', width=120)
        self.tree_movimentacoes.column('observacoes', width=200)
        
        # Scrollbars
        v_scroll_mov = ttk.Scrollbar(lista_mov_frame, orient=tk.VERTICAL, 
                                   command=self.tree_movimentacoes.yview)
        h_scroll_mov = ttk.Scrollbar(lista_mov_frame, orient=tk.HORIZONTAL, 
                                   command=self.tree_movimentacoes.xview)
        
        self.tree_movimentacoes.configure(yscrollcommand=v_scroll_mov.set,
                                        xscrollcommand=h_scroll_mov.set)
        
        # Grid
        self.tree_movimentacoes.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scroll_mov.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scroll_mov.grid(row=1, column=0, sticky=(tk.W, tk.E))
    
    def create_card_movimentacao(self, parent, titulo, valor, cor, row, col):
        """Criar card de movimenta√ß√£o"""
        card_frame = ttk.Frame(parent, relief='solid', borderwidth=1)
        card_frame.grid(row=row, column=col, sticky=(tk.W, tk.E), padx=5, pady=5)
        card_frame.columnconfigure(0, weight=1)
        
        # T√≠tulo
        ttk.Label(card_frame, text=titulo, font=('Arial', 10, 'bold')).grid(
            row=0, column=0, pady=(5, 2))
        
        # Valor
        valor_var = tk.StringVar(value=valor)
        valor_label = ttk.Label(card_frame, textvariable=valor_var, 
                               font=('Arial', 14, 'bold'), foreground=cor)
        valor_label.grid(row=1, column=0, pady=(0, 5))
        
        # Armazenar refer√™ncia
        titulo_clean = titulo.lower().replace(' ', '_').replace('üí∞', '').replace('üí∏', '').replace('üìä', '').strip()
        setattr(self, f"mov_{titulo_clean}_var", valor_var)
    
    def create_aba_categorias(self):
        """Criar aba de categorias"""
        aba_cat = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(aba_cat, text="üìÇ Categorias")
        
        # Configurar grid
        aba_cat.columnconfigure(0, weight=1)
        aba_cat.columnconfigure(1, weight=1)
        aba_cat.rowconfigure(1, weight=1)
        
        # Cabe√ßalho
        header_cat = ttk.Frame(aba_cat)
        header_cat.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(header_cat, text="üìÇ Gest√£o de Categorias", 
                 style='Subtitulo.TLabel').pack(side=tk.LEFT)
        
        ttk.Button(header_cat, text="‚ûï Nova Categoria", 
                  command=self.nova_categoria).pack(side=tk.RIGHT)
        
        # Lista de categorias
        lista_cat_frame = ttk.LabelFrame(aba_cat, text="üìã Categorias Cadastradas", padding="10")
        lista_cat_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        lista_cat_frame.columnconfigure(0, weight=1)
        lista_cat_frame.rowconfigure(0, weight=1)
        
        # Treeview categorias
        cols_cat = ('nome', 'tipo', 'ativo', 'total_movimentacoes')
        self.tree_categorias = ttk.Treeview(lista_cat_frame, columns=cols_cat, 
                                          show='headings', height=15)
        
        self.tree_categorias.heading('nome', text='Nome')
        self.tree_categorias.heading('tipo', text='Tipo')
        self.tree_categorias.heading('ativo', text='Ativo')
        self.tree_categorias.heading('total_movimentacoes', text='Movimenta√ß√µes')
        
        # Scrollbar categorias
        scroll_cat = ttk.Scrollbar(lista_cat_frame, orient=tk.VERTICAL, 
                                 command=self.tree_categorias.yview)
        self.tree_categorias.configure(yscrollcommand=scroll_cat.set)
        
        self.tree_categorias.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scroll_cat.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Painel de an√°lise por categoria
        analise_cat_frame = ttk.LabelFrame(aba_cat, text="üìä An√°lise por Categoria", padding="10")
        analise_cat_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        analise_cat_frame.columnconfigure(0, weight=1)
        analise_cat_frame.rowconfigure(1, weight=1)
        
        # Filtro de per√≠odo
        periodo_cat_frame = ttk.Frame(analise_cat_frame)
        periodo_cat_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(periodo_cat_frame, text="Per√≠odo:").pack(side=tk.LEFT)
        
        self.periodo_cat_var = tk.StringVar(value="mes_atual")
        periodo_cat_combo = ttk.Combobox(periodo_cat_frame, textvariable=self.periodo_cat_var, width=15)
        periodo_cat_combo['values'] = ('mes_atual', 'trimestre', 'semestre', 'ano')
        periodo_cat_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # Gr√°fico de categorias (simulado)
        self.analise_cat_text = tk.Text(analise_cat_frame, wrap=tk.WORD, state='disabled')
        self.analise_cat_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Eventos
        self.tree_categorias.bind('<<TreeviewSelect>>', self.on_categoria_selected)
        self.tree_categorias.bind('<Double-1>', self.editar_categoria)
    
    def create_status_bar(self, parent):
        """Criar barra de status"""
        status_frame = ttk.Frame(parent, relief=tk.SUNKEN, borderwidth=1)
        status_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        status_frame.columnconfigure(0, weight=1)
        
        self.status_text = tk.StringVar(value="Sistema financeiro pronto")
        ttk.Label(status_frame, textvariable=self.status_text).pack(side=tk.LEFT, padx=5, pady=2)
        
        # Indicador de conex√£o
        self.conexao_text = tk.StringVar(value="üî¥ Desconectado")
        ttk.Label(status_frame, textvariable=self.conexao_text).pack(side=tk.RIGHT, padx=5, pady=2)
    
    # =========================================================================
    # M√âTODOS DE DADOS E API
    # =========================================================================
    
    def carregar_dados_iniciais(self):
        """Carregar dados iniciais"""
        self.status_text.set("Carregando dados financeiros...")
        
        # Iniciar em thread separada
        thread = threading.Thread(target=self._carregar_dados_thread)
        thread.daemon = True
        thread.start()
    
    def _carregar_dados_thread(self):
        """Carregar dados em thread separada"""
        try:
            # Testar conex√£o
            response = requests.get(f"{self.api_base_url}/financeiro/health", timeout=5)
            if response.status_code == 200:
                self.window.after(0, lambda: self.conexao_text.set("üü¢ Conectado"))
                
                # Carregar dados
                self.carregar_dashboard()
                self.carregar_contas_receber()
                self.carregar_contas_pagar()
                self.carregar_movimentacoes()
                self.carregar_categorias()
                
                self.window.after(0, lambda: self.status_text.set("Dados financeiros carregados"))
            else:
                self.window.after(0, lambda: self.conexao_text.set("üü° Conex√£o inst√°vel"))
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Erro de conex√£o: {e}")
            self.window.after(0, lambda: self.conexao_text.set("üî¥ Erro de conex√£o"))
            self.window.after(0, lambda: self.status_text.set("Modo demonstra√ß√£o ativo"))
            
            # Carregar dados mock
            self.carregar_dados_mock()
    
    def carregar_dados_mock(self):
        """Carregar dados mock para demonstra√ß√£o"""
        # Contas a receber mock
        self.lista_contas_receber = [
            {
                'id': 1,
                'cliente_nome': 'Jo√£o Silva Constru√ß√µes',
                'descricao': 'Instala√ß√£o forro PVC - OS #001',
                'valor': 5500.00,
                'data_vencimento': '2025-11-15',
                'status': 'PENDENTE',
                'categoria': 'Servi√ßos'
            },
            {
                'id': 2,
                'cliente_nome': 'Maria Santos Arquitetura',
                'descricao': 'Divis√≥rias vidro - OS #002',
                'valor': 8200.00,
                'data_vencimento': '2025-11-30',
                'status': 'PENDENTE',
                'categoria': 'Servi√ßos'
            }
        ]
        
        # Contas a pagar mock
        self.lista_contas_pagar = [
            {
                'id': 1,
                'fornecedor_nome': 'Fornecedor ABC',
                'descricao': 'Material PVC',
                'valor': 2500.00,
                'data_vencimento': '2025-11-10',
                'status': 'PENDENTE',
                'categoria': 'Materiais'
            }
        ]
        
        # Atualizar interface
        self.window.after(0, self.atualizar_interface_completa)
    
    def carregar_dashboard(self):
        """Carregar dados do dashboard"""
        try:
            response = requests.get(f"{self.api_base_url}/financeiro/dashboard", timeout=10)
            if response.status_code == 200:
                self.dashboard_data = response.json()
                self.window.after(0, self.atualizar_dashboard)
        except Exception as e:
            logger.error(f"Erro ao carregar dashboard: {e}")
    
    def carregar_contas_receber(self):
        """Carregar contas a receber"""
        try:
            response = requests.get(f"{self.api_base_url}/financeiro/contas-receber", timeout=10)
            if response.status_code == 200:
                self.lista_contas_receber = response.json()
                self.window.after(0, self.atualizar_tree_receber)
        except Exception as e:
            logger.error(f"Erro ao carregar contas a receber: {e}")
    
    def carregar_contas_pagar(self):
        """Carregar contas a pagar"""
        try:
            response = requests.get(f"{self.api_base_url}/financeiro/contas-pagar", timeout=10)
            if response.status_code == 200:
                self.lista_contas_pagar = response.json()
                self.window.after(0, self.atualizar_tree_pagar)
        except Exception as e:
            logger.error(f"Erro ao carregar contas a pagar: {e}")
    
    def carregar_movimentacoes(self):
        """Carregar movimenta√ß√µes"""
        try:
            response = requests.get(f"{self.api_base_url}/financeiro/movimentacoes", timeout=10)
            if response.status_code == 200:
                self.lista_movimentacoes = response.json()
                self.window.after(0, self.atualizar_tree_movimentacoes)
        except Exception as e:
            logger.error(f"Erro ao carregar movimenta√ß√µes: {e}")
    
    def carregar_categorias(self):
        """Carregar categorias"""
        try:
            response = requests.get(f"{self.api_base_url}/financeiro/categorias", timeout=10)
            if response.status_code == 200:
                self.lista_categorias = response.json()
                self.window.after(0, self.atualizar_tree_categorias)
        except Exception as e:
            logger.error(f"Erro ao carregar categorias: {e}")
    
    def atualizar_interface_completa(self):
        """Atualizar toda a interface"""
        self.atualizar_dashboard()
        self.atualizar_tree_receber()
        self.atualizar_tree_pagar()
        self.atualizar_tree_movimentacoes()
        self.atualizar_tree_categorias()
    
    def atualizar_dashboard(self):
        """Atualizar dashboard"""
        # Simular dados
        if hasattr(self, 'valor_receitas_var'):
            self.valor_receitas_var.set("R$ 13.700,00")
        if hasattr(self, 'valor_despesas_var'):
            self.valor_despesas_var.set("R$ 2.500,00")
        if hasattr(self, 'valor_saldo_var'):
            self.valor_saldo_var.set("R$ 11.200,00")
        if hasattr(self, 'valor_em_aberto_var'):
            self.valor_em_aberto_var.set("R$ 13.700,00")
    
    def atualizar_tree_receber(self):
        """Atualizar tree de contas a receber"""
        # Limpar √°rvore
        for item in self.tree_receber.get_children():
            self.tree_receber.delete(item)
        
        # Adicionar contas
        for conta in self.lista_contas_receber:
            self.tree_receber.insert('', 'end', values=(
                conta.get('id', ''),
                conta.get('cliente_nome', ''),
                conta.get('descricao', ''),
                f"R$ {conta.get('valor', 0):,.2f}",
                conta.get('data_vencimento', ''),
                conta.get('status', ''),
                conta.get('categoria', '')
            ))
    
    def atualizar_tree_pagar(self):
        """Atualizar tree de contas a pagar"""
        # Limpar √°rvore
        for item in self.tree_pagar.get_children():
            self.tree_pagar.delete(item)
        
        # Adicionar contas
        for conta in self.lista_contas_pagar:
            self.tree_pagar.insert('', 'end', values=(
                conta.get('id', ''),
                conta.get('fornecedor_nome', ''),
                conta.get('descricao', ''),
                f"R$ {conta.get('valor', 0):,.2f}",
                conta.get('data_vencimento', ''),
                conta.get('status', ''),
                conta.get('categoria', '')
            ))
    
    def atualizar_tree_movimentacoes(self):
        """Atualizar tree de movimenta√ß√µes"""
        # Implementar quando necess√°rio
        pass
    
    def atualizar_tree_categorias(self):
        """Atualizar tree de categorias"""
        # Implementar quando necess√°rio
        pass
    
    # =========================================================================
    # A√á√ïES DA INTERFACE
    # =========================================================================
    
    def abrir_dashboard(self):
        """Abrir dashboard"""
        self.notebook.select(0)
    
    def nova_conta(self):
        """Nova conta (gen√©rica)"""
        messagebox.showinfo("Nova Conta", "Selecione a aba espec√≠fica para criar nova conta")
    
    def nova_conta_receber(self):
        """Nova conta a receber"""
        messagebox.showinfo("Contas a Receber", "Funcionalidade em desenvolvimento")
    
    def nova_conta_pagar(self):
        """Nova conta a pagar"""
        messagebox.showinfo("Contas a Pagar", "Funcionalidade em desenvolvimento")
    
    def marcar_como_pago(self):
        """Marcar conta a receber como paga"""
        selection = self.tree_receber.selection()
        if selection:
            messagebox.showinfo("Pagamento", "Conta marcada como paga!")
        else:
            messagebox.showwarning("Aviso", "Selecione uma conta")
    
    def marcar_como_pago_pagar(self):
        """Marcar conta a pagar como paga"""
        selection = self.tree_pagar.selection()
        if selection:
            messagebox.showinfo("Pagamento", "Conta marcada como paga!")
        else:
            messagebox.showwarning("Aviso", "Selecione uma conta")
    
    def enviar_cobranca(self):
        """Enviar cobran√ßa"""
        messagebox.showinfo("Cobran√ßa", "Funcionalidade em desenvolvimento")
    
    def agendar_pagamento(self):
        """Agendar pagamento"""
        messagebox.showinfo("Agendamento", "Funcionalidade em desenvolvimento")
    
    def nova_movimentacao(self):
        """Nova movimenta√ß√£o"""
        messagebox.showinfo("Movimenta√ß√£o", "Funcionalidade em desenvolvimento")
    
    def exportar_movimentacoes(self):
        """Exportar movimenta√ß√µes"""
        messagebox.showinfo("Exportar", "Funcionalidade em desenvolvimento")
    
    def nova_categoria(self):
        """Nova categoria"""
        messagebox.showinfo("Categoria", "Funcionalidade em desenvolvimento")
    
    def gerar_relatorios(self):
        """Gerar relat√≥rios"""
        messagebox.showinfo("Relat√≥rios", "Funcionalidade em desenvolvimento")
    
    def aplicar_filtros_receber(self):
        """Aplicar filtros contas a receber"""
        self.status_text.set("Filtros aplicados - Contas a Receber")
    
    def aplicar_filtros_pagar(self):
        """Aplicar filtros contas a pagar"""
        self.status_text.set("Filtros aplicados - Contas a Pagar")
    
    def aplicar_filtros_movimentacoes(self):
        """Aplicar filtros movimenta√ß√µes"""
        self.status_text.set("Filtros aplicados - Movimenta√ß√µes")
    
    def atualizar_contas_receber(self):
        """Atualizar contas a receber"""
        self.carregar_contas_receber()
    
    def atualizar_contas_pagar(self):
        """Atualizar contas a pagar"""
        self.carregar_contas_pagar()
    
    def atualizar_movimentacoes(self):
        """Atualizar movimenta√ß√µes"""
        self.carregar_movimentacoes()
    
    def atualizar_contas_destaque(self, event=None):
        """Atualizar contas em destaque"""
        # Implementar l√≥gica de destaque
        pass
    
    def atualizar_graficos(self, event=None):
        """Atualizar gr√°ficos"""
        # Implementar atualiza√ß√£o de gr√°ficos
        pass
    
    def on_conta_receber_selected(self, event):
        """Evento conta a receber selecionada"""
        pass
    
    def on_conta_pagar_selected(self, event):
        """Evento conta a pagar selecionada"""
        pass
    
    def on_categoria_selected(self, event):
        """Evento categoria selecionada"""
        pass
    
    def editar_conta_receber(self, event):
        """Editar conta a receber"""
        messagebox.showinfo("Editar", "Funcionalidade em desenvolvimento")
    
    def editar_conta_pagar(self, event):
        """Editar conta a pagar"""
        messagebox.showinfo("Editar", "Funcionalidade em desenvolvimento")
    
    def editar_categoria(self, event):
        """Editar categoria"""
        messagebox.showinfo("Editar", "Funcionalidade em desenvolvimento")
    
    def on_closing(self):
        """Evento de fechamento da janela"""
        if messagebox.askokcancel("Sair", "Deseja fechar o sistema financeiro?"):
            self.window.destroy()

# =============================================================================
# FUN√á√ÉO PRINCIPAL PARA TESTE
# =============================================================================

def main():
    """Fun√ß√£o principal para teste da interface"""
    app = FinanceiroWindow()
    app.window.mainloop()

if __name__ == "__main__":
    main()