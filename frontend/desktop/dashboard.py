"""
SISTEMA ERP PRIMOTEX - DASHBOARD INTEGRADO
==========================================

Dashboard principal consolidado com m√©tricas de todos os m√≥dulos:
- Ordem de Servi√ßo: workflow, estat√≠sticas, alertas
- Agendamento: calend√°rio, disponibilidade, pr√≥ximos eventos  
- Financeiro: fluxo de caixa, contas pendentes, receitas
- Comunica√ß√£o: templates, hist√≥rico, estat√≠sticas de envio
- Clientes/Produtos: m√©tricas b√°sicas e alertas

Interface executiva com KPIs em tempo real e alertas autom√°ticos.

Autor: GitHub Copilot
Data: 29/10/2025
"""

import tkinter as tk
from tkinter import ttk, messagebox, Canvas
import threading
import requests
from datetime import datetime, date, timedelta
from typing import Dict, Any, Optional, List
import json
import time
import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

# Constantes da UI centralizadas
try:
    from ui_constants import (
        COLORS, FONT_STYLES, MODULE_TITLES, ACTION_MESSAGES, 
        PERFORMANCE
    )
except ImportError:
    # Fallback se ui_constants n√£o estiver dispon√≠vel
    COLORS = {
        'primary': '#2c3e50',
        'secondary': '#3498db',
        'success': '#27ae60',
        'warning': '#f39c12',
        'danger': '#e74c3c',
        'light': '#ecf0f1',
        'dark': '#34495e'
    }
    FONT_STYLES = {'default': ('Segoe UI', 10)}
    MODULE_TITLES = {}
    ACTION_MESSAGES = {}
    PERFORMANCE = {}

# Sistemas de performance (opcionais)
try:
    from shared.cache_system import erp_cache
    from shared.lazy_loading import erp_loader
    PERFORMANCE_ENABLED = True
except ImportError:
    erp_cache = None
    erp_loader = None
    PERFORMANCE_ENABLED = False

# Constantes locais para evitar depend√™ncias externas
API_BASE_URL = "http://127.0.0.1:8002"

# Configura√ß√µes padr√£o se PERFORMANCE n√£o estiver dispon√≠vel
try:
    API_TIMEOUT = PERFORMANCE['api_timeout']
    CACHE_TIMEOUT_CONFIG = PERFORMANCE['cache_timeout']
    REFRESH_INTERVAL_CONFIG = PERFORMANCE['refresh_interval']
except (NameError, KeyError):
    API_TIMEOUT = 10
    CACHE_TIMEOUT_CONFIG = 30
    REFRESH_INTERVAL_CONFIG = 5000

# =======================================
# CONFIGURA√á√ïES
# =======================================

# Cache de dados (atualizado a cada 30 segundos)
CACHE_TIMEOUT = 30  # segundos
REFRESH_INTERVAL = 5000  # millisegundos para auto-refresh

# Cores do dashboard
COLORS = {
    'primary': '#2c3e50',
    'success': '#27ae60', 
    'warning': '#f39c12',
    'danger': '#e74c3c',
    'info': '#3498db',
    'light': '#ecf0f1',
    'dark': '#34495e',
    'background': '#f8f9fa'
}

# =======================================
# CLASSE DO DASHBOARD
# =======================================

class DashboardWindow:
    """Dashboard integrado com m√©tricas de todos os m√≥dulos"""
    
    def __init__(self, user_data: Dict[str, Any]):
        self.user_data = user_data
        self.token = user_data.get("access_token")
        self.user_info = user_data.get("user", {})
        
        # Cache de dados
        self.metrics_cache = {}
        self.last_update = {}
        self.alerts = []
        
        # Configura√ß√µes de API
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
        
        self.root = tk.Tk()
        self.setup_window()
        self.create_widgets()
        self.load_dashboard_data()
        self.start_auto_refresh()
    
    def setup_window(self):
        """Configurar janela principal"""
        
        self.root.title("Sistema ERP Primotex - Dashboard")
        self.root.geometry("1200x800")
        self.root.state('zoomed')  # Maximizar no Windows
        
        # Configurar cor de fundo
        self.root.configure(bg='#f8f9fa')
        
        # Configurar protocolo de fechamento
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_widgets(self):
        """Criar widgets do dashboard"""

        # === BARRA SUPERIOR ===
        self.create_top_bar()
        
        # === SISTEMA DE NAVEGA√á√ÉO ===
        self.create_navigation_system()
        
        # === CONTAINER PRINCIPAL ===
        main_container = tk.Frame(self.root, bg='#f8f9fa')
        main_container.pack(fill='both', expand=True, padx=10, pady=5)

        # === MENU LATERAL ===
        self.create_sidebar(main_container)

        # === √ÅREA DE CONTE√öDO ===
        self.create_content_area(main_container)
    
    def create_navigation_system(self):
        """Criar sistema de navega√ß√£o integrado"""
        try:
            from navigation_system import NavigationSystem, QuickSearchWidget
            
            # Criar sistema de navega√ß√£o
            self.nav_system = NavigationSystem(self.root)
            
            # Criar busca r√°pida
            self.search_widget = QuickSearchWidget(self.root, {})
            
            # Registrar callbacks de navega√ß√£o
            self.register_navigation_callbacks()
            
        except Exception as e:
            print(f"Erro ao criar sistema de navega√ß√£o: {str(e)}")
    
    def register_navigation_callbacks(self):
        """Registrar callbacks para navega√ß√£o"""
        
        # Registrar m√≥dulos no sistema de navega√ß√£o
        callbacks = {
            'dashboard': self.show_dashboard,
            'clientes': self.show_clients,
            'produtos': self.show_products,
            'estoque': self.show_estoque,
            'codigo_barras': self.show_codigo_barras,
            'relatorios': self.show_reports,
            'financeiro': self.show_financial,
            'orders': self.show_orders,
            'configuracoes': self.show_settings
        }
        
        for module_id, callback in callbacks.items():
            if hasattr(self, 'nav_system'):
                self.nav_system.register_callback(module_id, callback)

    def create_top_bar(self):
        """Criar barra superior com informa√ß√µes do usu√°rio"""
        
        top_frame = tk.Frame(self.root, bg='#2c3e50', height=60)
        top_frame.pack(fill='x')
        top_frame.pack_propagate(False)
        
        # Container interno
        container = tk.Frame(top_frame, bg='#2c3e50')
        container.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Logo e t√≠tulo (esquerda)
        left_frame = tk.Frame(container, bg='#2c3e50')
        left_frame.pack(side='left', fill='y')
        
        logo_label = tk.Label(
            left_frame,
            text="üè¢ Sistema ERP Primotex",
            font=('Arial', 16, 'bold'),
            bg='#2c3e50',
            fg='white'
        )
        logo_label.pack(side='left', pady=5)
        
        # Informa√ß√µes do usu√°rio (direita)
        right_frame = tk.Frame(container, bg='#2c3e50')
        right_frame.pack(side='right', fill='y')
        
        # Data/hora atual
        self.datetime_label = tk.Label(
            right_frame,
            font=('Arial', 10),
            bg='#2c3e50',
            fg='#bdc3c7'
        )
        self.datetime_label.pack(side='right', padx=(0, 20))
        self.update_datetime()
        
        # Informa√ß√µes do usu√°rio
        user_info = f"üë§ {self.user_info.get('nome_completo', 'Usu√°rio')} ({self.user_info.get('perfil', 'N/A')})"
        user_label = tk.Label(
            right_frame,
            text=user_info,
            font=('Arial', 11),
            bg='#2c3e50',
            fg='white'
        )
        user_label.pack(side='right', padx=(0, 20), pady=5)
        
        # Bot√£o logout
        logout_btn = tk.Button(
            right_frame,
            text="üö™ Sair",
            font=('Arial', 9),
            bg='#e74c3c',
            fg='white',
            border=0,
            padx=10,
            pady=2,
            command=self.logout
        )
        logout_btn.pack(side='right', padx=(0, 10))
    
    def create_sidebar(self, parent):
        """Criar menu lateral"""
        
        sidebar = tk.Frame(parent, bg='#34495e', width=250)
        sidebar.pack(side='left', fill='y', padx=(0, 10))
        sidebar.pack_propagate(False)
        
        # T√≠tulo do menu
        menu_title = tk.Label(
            sidebar,
            text="üìã M√ìDULOS DO SISTEMA",
            font=('Arial', 12, 'bold'),
            bg='#34495e',
            fg='white',
            pady=15
        )
        menu_title.pack(fill='x')
        
        # Bot√µes do menu
        self.create_menu_buttons(sidebar)
    
    def create_menu_buttons(self, parent):
        """Criar bot√µes do menu lateral"""
        
        buttons = [
            ("üìä Dashboard", self.show_dashboard, "#3498db"),
            ("üë• Clientes", self.show_clients, "#2ecc71"),
            ("üì¶ Produtos", self.show_products, "#f39c12"),
            ("üì¶ Estoque", self.show_estoque, "#e67e22"),
            ("üè∑Ô∏è C√≥digos de Barras", self.show_codigo_barras, "#8e44ad"),
            (MODULE_TITLES['ordem_servico'], self.show_orders, "#9b59b6"),
            (MODULE_TITLES['financeiro'], self.show_financial, "#e67e22"),
            (MODULE_TITLES['comunicacao'], self.show_comunicacao, "#25d366"),
            ("üìà Relat√≥rios", self.show_reports, "#1abc9c"),
            ("‚öôÔ∏è Configura√ß√µes", self.show_settings, "#95a5a6"),
        ]
        
        for text, command, color in buttons:
            btn = tk.Button(
                parent,
                text=text,
                font=('Arial', 11),
                bg=color,
                fg='white',
                border=0,
                pady=12,
                command=command,
                relief='flat',
                cursor='hand2'
            )
            btn.pack(fill='x', padx=10, pady=2)
            
            # Efeito hover
            def on_enter(e, button=btn, original_color=color):
                button.config(bg=self.darken_color(original_color))
            
            def on_leave(e, button=btn, original_color=color):
                button.config(bg=original_color)
            
            btn.bind("<Enter>", on_enter)
            btn.bind("<Leave>", on_leave)
    
    def create_content_area(self, parent):
        """Criar √°rea de conte√∫do principal"""
        
        # Container de conte√∫do
        self.content_frame = tk.Frame(parent, bg='white', relief='raised', bd=1)
        self.content_frame.pack(side='right', fill='both', expand=True)
        
        # Mostrar dashboard inicial
        self.show_dashboard()
    
    def show_dashboard(self):
        """Mostrar dashboard integrado"""
        
        self.clear_content()
        
        # Scrollable frame principal
        canvas = Canvas(self.content_frame, bg=COLORS['background'])
        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # === SE√á√ÉO 1: HEADER COM ALERTAS ===
        self.create_header_section(scrollable_frame)
        
        # === SE√á√ÉO 2: KPIs PRINCIPAIS (5 colunas) ===
        self.create_kpi_section(scrollable_frame)
        
        # === SE√á√ÉO 3: M√ìDULOS DETALHADOS (2x2 grid) ===
        self.create_modules_section(scrollable_frame)
        
        # === SE√á√ÉO 4: GR√ÅFICOS E TEND√äNCIAS ===
        self.create_charts_section(scrollable_frame)
        
        # === SE√á√ÉO 5: A√á√ïES R√ÅPIDAS ===
        self.create_quick_actions_section(scrollable_frame)
    
    def create_header_section(self, parent):
        """Criar header com t√≠tulo e alertas"""
        
        header_frame = tk.Frame(parent, bg=COLORS['background'])
        header_frame.pack(fill='x', padx=20, pady=10)
        
        # T√≠tulo principal
        title_frame = tk.Frame(header_frame, bg=COLORS['background'])
        title_frame.pack(fill='x', pady=(0, 10))
        
        title = tk.Label(
            title_frame,
            text="üìä Dashboard Executivo - Sistema ERP Primotex",
            font=FONT_STYLES['title'],
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        title.pack(side='left')
        
        # Data/hora atual
        now = datetime.now()
        timestamp = tk.Label(
            title_frame,
            text=f"Atualizado: {now.strftime('%d/%m/%Y %H:%M')}",
            font=FONT_STYLES['medium'],
            bg=COLORS['background'],
            fg=COLORS['dark']
        )
        timestamp.pack(side='right')
        
        # Barra de alertas
        self.alerts_frame = tk.Frame(header_frame, bg=COLORS['background'])
        self.alerts_frame.pack(fill='x')
        
        self.update_alerts_display()
    
    def update_alerts_display(self):
        """Atualizar exibi√ß√£o de alertas"""
        
        # Limpar alertas existentes
        for widget in self.alerts_frame.winfo_children():
            widget.destroy()
        
        if not self.alerts:
            no_alerts = tk.Label(
                self.alerts_frame,
                text="‚úÖ Nenhum alerta cr√≠tico no momento",
                font=('Segoe UI', 10),
                bg=COLORS['success'],
                fg='white',
                relief='flat',
                padx=10,
                pady=5
            )
            no_alerts.pack(side='left', padx=5)
        else:
            for alert in self.alerts[:3]:  # Mostrar m√°ximo 3 alertas
                alert_label = tk.Label(
                    self.alerts_frame,
                    text=f"‚ö†Ô∏è {alert['message']}",
                    font=('Segoe UI', 10),
                    bg=COLORS[alert.get('type', 'warning')],
                    fg='white',
                    relief='flat',
                    padx=10,
                    pady=5
                )
                alert_label.pack(side='left', padx=5)
        """Criar cards com m√©tricas principais"""
        
    def create_kpi_section(self, parent):
        """Criar se√ß√£o de KPIs principais"""
        
        kpi_frame = tk.Frame(parent, bg=COLORS['background'])
        kpi_frame.pack(fill='x', padx=20, pady=10)
        
        # T√≠tulo da se√ß√£o
        section_title = tk.Label(
            kpi_frame,
            text="üìà Indicadores Principais",
            font=('Segoe UI', 14, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        section_title.pack(anchor='w', pady=(0, 10))
        
        # Frame para os cards
        cards_frame = tk.Frame(kpi_frame, bg=COLORS['background'])
        cards_frame.pack(fill='x')
        
        # KPIs principais (dados do cache)
        kpis = [
            {
                'title': 'üë• Clientes',
                'value': self.get_cached_value('clientes', 'total', '0'),
                'subtitle': 'Total cadastrados',
                'color': COLORS['info'],
                'trend': self.get_cached_value('clientes', 'trend', '0%')
            },
            {
                'title': 'üìã Ordens Servi√ßo',
                'value': self.get_cached_value('os', 'abertas', '0'),
                'subtitle': 'Abertas/Execu√ß√£o',
                'color': COLORS['warning'],
                'trend': self.get_cached_value('os', 'trend', '0%')
            },
            {
                'title': 'üìÖ Agendamentos',
                'value': self.get_cached_value('agendamento', 'hoje', '0'),
                'subtitle': 'Hoje',
                'color': COLORS['success'],
                'trend': self.get_cached_value('agendamento', 'trend', '0%')
            },
            {
                'title': 'üí∞ Financeiro',
                'value': self.get_cached_value('financeiro', 'saldo', 'R$ 0'),
                'subtitle': 'Saldo atual',
                'color': COLORS['primary'],
                'trend': self.get_cached_value('financeiro', 'trend', '0%')
            },
            {
                'title': '‚ö° Performance',
                'value': self.get_performance_metrics(),
                'subtitle': 'Cache Hit Ratio',
                'color': '#9b59b6',  # Roxo para performance
                'trend': self.get_performance_trend()
            }
        ]
        
        for i, kpi in enumerate(kpis):
            card = self.create_kpi_card(cards_frame, kpi)
            card.grid(row=0, column=i, padx=8, pady=5, sticky='ew')
        
        # Configurar colunas para distribui√ß√£o igual
        for col_index in range(len(kpis)):
            cards_frame.grid_columnconfigure(col_index, weight=1)
    
    def create_kpi_card(self, parent, kpi_data: Dict[str, str]):
        """Criar card de KPI moderno"""
        
        card = tk.Frame(parent, bg='white', relief='raised', bd=1)
        
        # Container interno com padding
        inner = tk.Frame(card, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # T√≠tulo do KPI
        title_label = tk.Label(
            inner,
            text=kpi_data['title'],
            font=('Segoe UI', 11, 'bold'),
            bg='white',
            fg=COLORS['dark']
        )
        title_label.pack(anchor='w')
        
        # Valor principal (grande)
        value_label = tk.Label(
            inner,
            text=kpi_data['value'],
            font=('Segoe UI', 18, 'bold'),
            bg='white',
            fg=kpi_data['color']
        )
        value_label.pack(anchor='w', pady=(5, 0))
        
        # Subtitle e trend em linha
        bottom_frame = tk.Frame(inner, bg='white')
        bottom_frame.pack(fill='x', pady=(5, 0))
        
        subtitle_label = tk.Label(
            bottom_frame,
            text=kpi_data['subtitle'],
            font=('Segoe UI', 9),
            bg='white',
            fg=COLORS['dark']
        )
        subtitle_label.pack(side='left')
        
        # Trend (se positivo = verde, negativo = vermelho)
        trend_text = kpi_data['trend']
        
        # Determinar cor da tend√™ncia de forma mais leg√≠vel
        if '+' in trend_text:
            trend_color = COLORS['success']
        elif '-' in trend_text:
            trend_color = COLORS['danger']
        else:
            trend_color = COLORS['dark']
        
        trend_label = tk.Label(
            bottom_frame,
            text=trend_text,
            font=('Segoe UI', 9, 'bold'),
            bg='white',
            fg=trend_color
        )
        trend_label.pack(side='right')
        
        return card
    
    def get_cached_value(self, module: str, metric: str, default: str = '0') -> str:
        """Obter valor do cache ou padr√£o"""
        try:
            return self.metrics_cache.get(module, {}).get(metric, default)
        except Exception:
            return default
    
    def get_performance_metrics(self) -> str:
        """Obter m√©tricas de performance do sistema"""
        try:
            health = erp_cache.get_cache_health()
            hit_ratio = health.get('hit_ratio', 0)
            return f"{hit_ratio:.0f}%"
        except Exception:
            return "N/A"
    
    def get_performance_trend(self) -> str:
        """Obter tend√™ncia de performance"""
        try:
            health = erp_cache.get_cache_health()
            hit_ratio = health.get('hit_ratio', 0)
            
            if hit_ratio >= 80:
                return "üöÄ Excelente"
            elif hit_ratio >= 60:
                return "‚úÖ Bom"
            elif hit_ratio >= 40:
                return "‚ö†Ô∏è Regular"
            else:
                return "üîß Otimizar"
        except Exception:
            return "‚ûñ"
    
    def create_modules_section(self, parent):
        """Criar se√ß√£o de m√≥dulos detalhados (2x2 grid)"""
        
        modules_frame = tk.Frame(parent, bg=COLORS['background'])
        modules_frame.pack(fill='x', padx=20, pady=20)
        
        # T√≠tulo da se√ß√£o
        section_title = tk.Label(
            modules_frame,
            text="üè¢ M√≥dulos do Sistema",
            font=('Segoe UI', 14, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        section_title.pack(anchor='w', pady=(0, 15))
        
        # Grid 2x2 dos m√≥dulos
        grid_frame = tk.Frame(modules_frame, bg=COLORS['background'])
        grid_frame.pack(fill='x')
        
        # Configurar grid
        grid_frame.grid_columnconfigure(0, weight=1)
        grid_frame.grid_columnconfigure(1, weight=1)
        
        # M√≥dulo 1: Ordem de Servi√ßo (0,0)
        self.create_os_module_card(grid_frame).grid(row=0, column=0, padx=10, pady=10, sticky='ew')
        
        # M√≥dulo 2: Agendamento (0,1)
        self.create_agendamento_module_card(grid_frame).grid(row=0, column=1, padx=10, pady=10, sticky='ew')
        
        # M√≥dulo 3: Financeiro (1,0)
        self.create_financeiro_module_card(grid_frame).grid(row=1, column=0, padx=10, pady=10, sticky='ew')
        
        # M√≥dulo 4: Comunica√ß√£o (1,1)
        self.create_comunicacao_module_card(grid_frame).grid(row=1, column=1, padx=10, pady=10, sticky='ew')
    
    def create_os_module_card(self, parent):
        """Card detalhado do m√≥dulo Ordem de Servi√ßo"""
        
        card = tk.Frame(parent, bg='white', relief='raised', bd=1)
        inner = tk.Frame(card, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # Header do m√≥dulo
        header = tk.Frame(inner, bg='white')
        header.pack(fill='x', pady=(0, 10))
        
        title = tk.Label(header, text="üìã Ordem de Servi√ßo", font=('Segoe UI', 12, 'bold'), bg='white', fg=COLORS['primary'])
        title.pack(side='left')
        
        btn_abrir = tk.Button(header, text="Abrir", font=('Segoe UI', 9), bg=COLORS['primary'], fg='white',
                             command=self.open_ordem_servico, relief='flat', padx=15)
        btn_abrir.pack(side='right')
        
        # M√©tricas do m√≥dulo
        metrics = [
            ("Abertas:", self.get_cached_value('os', 'abertas', '0')),
            ("Em execu√ß√£o:", self.get_cached_value('os', 'execucao', '0')),
            ("Atrasadas:", self.get_cached_value('os', 'atrasadas', '0')),
            ("Conclu√≠das hoje:", self.get_cached_value('os', 'concluidas_hoje', '0'))
        ]
        
        for label, value in metrics:
            row = tk.Frame(inner, bg='white')
            row.pack(fill='x', pady=2)
            
            tk.Label(row, text=label, font=('Segoe UI', 9), bg='white', fg=COLORS['dark']).pack(side='left')
            tk.Label(row, text=value, font=('Segoe UI', 9, 'bold'), bg='white', fg=COLORS['info']).pack(side='right')
        
        return card
    
    def create_agendamento_module_card(self, parent):
        """Card detalhado do m√≥dulo Agendamento"""
        
        card = tk.Frame(parent, bg='white', relief='raised', bd=1)
        inner = tk.Frame(card, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # Header
        header = tk.Frame(inner, bg='white')
        header.pack(fill='x', pady=(0, 10))
        
        title = tk.Label(header, text="üìÖ Agendamento", font=('Segoe UI', 12, 'bold'), bg='white', fg=COLORS['success'])
        title.pack(side='left')
        
        btn_abrir = tk.Button(header, text="Abrir", font=('Segoe UI', 9), bg=COLORS['success'], fg='white',
                             command=self.open_agendamento, relief='flat', padx=15)
        btn_abrir.pack(side='right')
        
        # M√©tricas
        metrics = [
            ("Hoje:", self.get_cached_value('agendamento', 'hoje', '0')),
            ("Esta semana:", self.get_cached_value('agendamento', 'semana', '0')),
            ("Pr√≥ximo:", self.get_cached_value('agendamento', 'proximo', 'N/A')),
            ("Disponibilidade:", self.get_cached_value('agendamento', 'disponibilidade', 'N/A'))
        ]
        
        for label, value in metrics:
            row = tk.Frame(inner, bg='white')
            row.pack(fill='x', pady=2)
            
            tk.Label(row, text=label, font=('Segoe UI', 9), bg='white', fg=COLORS['dark']).pack(side='left')
            tk.Label(row, text=value, font=('Segoe UI', 9, 'bold'), bg='white', fg=COLORS['success']).pack(side='right')
        
        return card
    
    def create_financeiro_module_card(self, parent):
        """Card detalhado do m√≥dulo Financeiro"""
        
        card = tk.Frame(parent, bg='white', relief='raised', bd=1)
        inner = tk.Frame(card, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # Header
        header = tk.Frame(inner, bg='white')
        header.pack(fill='x', pady=(0, 10))
        
        title = tk.Label(header, text="üí∞ Financeiro", font=('Segoe UI', 12, 'bold'), bg='white', fg=COLORS['primary'])
        title.pack(side='left')
        
        btn_abrir = tk.Button(header, text="Abrir", font=('Segoe UI', 9), bg=COLORS['primary'], fg='white',
                             command=self.open_financeiro, relief='flat', padx=15)
        btn_abrir.pack(side='right')
        
        # M√©tricas
        metrics = [
            ("Saldo atual:", self.get_cached_value('financeiro', 'saldo', 'R$ 0')),
            ("A receber:", self.get_cached_value('financeiro', 'receber', 'R$ 0')),
            ("A pagar:", self.get_cached_value('financeiro', 'pagar', 'R$ 0')),
            ("Vencidas:", self.get_cached_value('financeiro', 'vencidas', '0'))
        ]
        
        for label, value in metrics:
            row = tk.Frame(inner, bg='white')
            row.pack(fill='x', pady=2)
            
            tk.Label(row, text=label, font=('Segoe UI', 9), bg='white', fg=COLORS['dark']).pack(side='left')
            tk.Label(row, text=value, font=('Segoe UI', 9, 'bold'), bg='white', fg=COLORS['primary']).pack(side='right')
        
        return card
    
    def create_comunicacao_module_card(self, parent):
        """Card detalhado do m√≥dulo Comunica√ß√£o"""
        
        card = tk.Frame(parent, bg='white', relief='raised', bd=1)
        inner = tk.Frame(card, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # Header
        header = tk.Frame(inner, bg='white')
        header.pack(fill='x', pady=(0, 10))
        
        title = tk.Label(header, text="üì± Comunica√ß√£o", font=('Segoe UI', 12, 'bold'), bg='white', fg=COLORS['info'])
        title.pack(side='left')
        
        btn_abrir = tk.Button(header, text="Abrir", font=('Segoe UI', 9), bg=COLORS['info'], fg='white',
                             command=self.open_comunicacao, relief='flat', padx=15)
        btn_abrir.pack(side='right')
        
        # M√©tricas
        metrics = [
            ("Enviadas hoje:", self.get_cached_value('comunicacao', 'enviadas', '0')),
            ("Templates:", self.get_cached_value('comunicacao', 'templates', '0')),
            ("WhatsApp:", self.get_cached_value('comunicacao', 'whatsapp', '0')),
            ("Taxa sucesso:", self.get_cached_value('comunicacao', 'taxa_sucesso', '0%'))
        ]
        
        for label, value in metrics:
            row = tk.Frame(inner, bg='white')
            row.pack(fill='x', pady=2)
            
            tk.Label(row, text=label, font=('Segoe UI', 9), bg='white', fg=COLORS['dark']).pack(side='left')
            tk.Label(row, text=value, font=('Segoe UI', 9, 'bold'), bg='white', fg=COLORS['info']).pack(side='right')
        
        return card
    
    def create_charts_section(self, parent):
        """Criar se√ß√£o de gr√°ficos e tend√™ncias"""
        
        charts_frame = tk.Frame(parent, bg=COLORS['background'])
        charts_frame.pack(fill='x', padx=20, pady=20)
        
        # T√≠tulo da se√ß√£o
        section_title = tk.Label(
            charts_frame,
            text="üìä Tend√™ncias e An√°lises",
            font=('Segoe UI', 14, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        section_title.pack(anchor='w', pady=(0, 15))
        
        # Container dos gr√°ficos (2 colunas)
        graphs_container = tk.Frame(charts_frame, bg=COLORS['background'])
        graphs_container.pack(fill='x')
        
        # Configurar colunas
        graphs_container.grid_columnconfigure(0, weight=1)
        graphs_container.grid_columnconfigure(1, weight=1)
        
        # Gr√°fico 1: Atividades dos √∫ltimos 7 dias
        self.create_activity_chart(graphs_container).grid(row=0, column=0, padx=(0, 10), pady=5, sticky='ew')
        
        # Gr√°fico 2: Status financeiro
        self.create_financial_chart(graphs_container).grid(row=0, column=1, padx=(10, 0), pady=5, sticky='ew')
    
    def create_activity_chart(self, parent):
        """Criar gr√°fico de atividades dos √∫ltimos 7 dias"""
        
        chart_frame = tk.Frame(parent, bg='white', relief='raised', bd=1)
        inner = tk.Frame(chart_frame, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # T√≠tulo
        title = tk.Label(inner, text="üìà Atividades - √öltimos 7 dias", 
                        font=('Segoe UI', 11, 'bold'), bg='white', fg=COLORS['primary'])
        title.pack(anchor='w', pady=(0, 10))
        
        # Simula√ß√£o de gr√°fico com barras textuais
        days = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
        values = [12, 8, 15, 20, 18, 5, 3]  # Dados simulados
        
        for day, value in zip(days, values):
            row = tk.Frame(inner, bg='white')
            row.pack(fill='x', pady=1)
            
            tk.Label(row, text=day, font=('Segoe UI', 9), bg='white', fg=COLORS['dark'], width=4).pack(side='left')
            
            # Barra visual
            bar_length = int(value * 8)  # Escala visual
            bar_text = "‚ñà" * bar_length
            tk.Label(row, text=bar_text, font=('Segoe UI', 9), bg='white', fg=COLORS['info']).pack(side='left', padx=(5, 0))
            
            tk.Label(row, text=str(value), font=('Segoe UI', 9, 'bold'), bg='white', fg=COLORS['dark']).pack(side='right')
        
        return chart_frame
    
    def create_financial_chart(self, parent):
        """Criar gr√°fico de status financeiro"""
        
        chart_frame = tk.Frame(parent, bg='white', relief='raised', bd=1)
        inner = tk.Frame(chart_frame, bg='white')
        inner.pack(fill='both', expand=True, padx=15, pady=12)
        
        # T√≠tulo
        title = tk.Label(inner, text="ÔøΩ Status Financeiro", 
                        font=('Segoe UI', 11, 'bold'), bg='white', fg=COLORS['primary'])
        title.pack(anchor='w', pady=(0, 10))
        
        # M√©tricas financeiras
        financial_data = [
            ("Receitas", self.get_cached_value('financeiro', 'receitas', 'R$ 0'), COLORS['success']),
            ("Despesas", self.get_cached_value('financeiro', 'despesas', 'R$ 0'), COLORS['danger']),
            ("A Receber", self.get_cached_value('financeiro', 'receber', 'R$ 0'), COLORS['warning']),
            ("A Pagar", self.get_cached_value('financeiro', 'pagar', 'R$ 0'), COLORS['info'])
        ]
        
        for label, value, color in financial_data:
            row = tk.Frame(inner, bg='white')
            row.pack(fill='x', pady=3)
            
            tk.Label(row, text=f"‚óè {label}:", font=('Segoe UI', 9), 
                    bg='white', fg=color).pack(side='left')
            tk.Label(row, text=value, font=('Segoe UI', 9, 'bold'), 
                    bg='white', fg=COLORS['dark']).pack(side='right')
        
        return chart_frame
    
    def create_quick_actions_section(self, parent):
        """Criar se√ß√£o de a√ß√µes r√°pidas"""
        
        actions_frame = tk.Frame(parent, bg=COLORS['background'])
        actions_frame.pack(fill='x', padx=20, pady=(20, 40))
        
        # T√≠tulo da se√ß√£o
        section_title = tk.Label(
            actions_frame,
            text="‚ö° A√ß√µes R√°pidas",
            font=('Segoe UI', 14, 'bold'),
            bg=COLORS['background'],
            fg=COLORS['primary']
        )
        section_title.pack(anchor='w', pady=(0, 15))
        
        # Container dos bot√µes
        buttons_frame = tk.Frame(actions_frame, bg=COLORS['background'])
        buttons_frame.pack(fill='x')
        
        # A√ß√µes r√°pidas
        actions = [
            ("‚ûï Nova OS", self.quick_new_os, COLORS['warning']),
            ("üìÖ Agendar", self.quick_schedule, COLORS['success']),
            ("üí∞ Lan√ßamento", self.quick_financial, COLORS['primary']),
            ("üì± Enviar Msg", self.quick_message, COLORS['info']),
            ("üìã Relat√≥rio", self.quick_report, COLORS['dark'])
        ]
        
        for i, (text, command, color) in enumerate(actions):
            btn = tk.Button(
                buttons_frame,
                text=text,
                font=('Segoe UI', 10, 'bold'),
                bg=color,
                fg='white',
                relief='flat',
                padx=20,
                pady=8,
                command=command
            )
            btn.grid(row=0, column=i, padx=8, pady=5, sticky='ew')
        
        # Configurar colunas
        for i in range(len(actions)):
            buttons_frame.grid_columnconfigure(i, weight=1)
    
    # =======================================
    # M√âTODOS DE COLETA DE DADOS
    # =======================================
    
    def load_dashboard_data(self):
        """Carregar dados do dashboard em thread separada"""
        def fetch_data():
            try:
                self.fetch_all_metrics()
                self.root.after(0, self.refresh_dashboard_display)
            except Exception as e:
                print(f"Erro ao carregar dados: {e}")
        
        thread = threading.Thread(target=fetch_data, daemon=True)
        thread.start()
    
    def fetch_all_metrics(self):
        """Buscar m√©tricas de todos os m√≥dulos"""
        
        # Buscar m√©tricas de cada m√≥dulo
        self.fetch_clientes_metrics()
        self.fetch_os_metrics()
        self.fetch_agendamento_metrics()
        self.fetch_financeiro_metrics()
        self.fetch_comunicacao_metrics()
        
        # Atualizar alertas
        self.update_alerts()
    
    def fetch_clientes_metrics(self):
        """Buscar m√©tricas de clientes com cache"""
        try:
            # Tentar cache primeiro
            cached_data = erp_cache.get_clientes()
            if cached_data:
                self.metrics_cache['clientes'] = {
                    'total': str(len(cached_data)),
                    'trend': '+2%'  # Simulado
                }
                return
            
            # Buscar da API se n√£o h√° cache
            response = requests.get(
                f"{API_BASE_URL}/api/v1/clientes",
                headers=self.headers,
                timeout=API_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json()
                clientes = data.get('clientes', [])
                
                # Armazenar no cache
                erp_cache.set_clientes(clientes)
                
                self.metrics_cache['clientes'] = {
                    'total': str(len(clientes)),
                    'trend': '+2%'  # Simulado
                }
        except Exception as e:
            print(f"Erro ao buscar clientes: {e}")
            self.metrics_cache['clientes'] = {'total': '0', 'trend': '0%'}
    
    def fetch_os_metrics(self):
        """Buscar m√©tricas de Ordem de Servi√ßo"""
        try:
            response = requests.get(
                f"{API_BASE_URL}/api/v1/ordem-servico/dashboard/estatisticas",
                headers=self.headers,
                timeout=API_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json()
                self.metrics_cache['os'] = {
                    'abertas': str(data.get('por_status', {}).get('aberta', 0)),
                    'execucao': str(data.get('por_status', {}).get('em_execucao', 0)),
                    'atrasadas': str(data.get('atrasadas', 0)),
                    'concluidas_hoje': str(data.get('concluidas_hoje', 0)),
                    'trend': '+5%'
                }
        except Exception as e:
            print(f"Erro ao buscar OS: {e}")
            self.metrics_cache['os'] = {
                'abertas': '0', 'execucao': '0', 'atrasadas': '0', 
                'concluidas_hoje': '0', 'trend': '0%'
            }
    
    def fetch_agendamento_metrics(self):
        """Buscar m√©tricas de Agendamento"""
        try:
            response = requests.get(
                f"{API_BASE_URL}/api/v1/agendamento/estatisticas/",
                headers=self.headers,
                timeout=API_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json()
                self.metrics_cache['agendamento'] = {
                    'hoje': str(data.get('total_hoje', 0)),
                    'semana': str(data.get('total_semana', 0)),
                    'proximo': data.get('proximo_agendamento', 'N/A'),
                    'disponibilidade': '80%',  # Simulado
                    'trend': '+3%'
                }
        except Exception as e:
            print(f"Erro ao buscar agendamento: {e}")
            self.metrics_cache['agendamento'] = {
                'hoje': '0', 'semana': '0', 'proximo': 'N/A',
                'disponibilidade': 'N/A', 'trend': '0%'
            }
    
    def fetch_financeiro_metrics(self):
        """Buscar m√©tricas Financeiras"""
        try:
            response = requests.get(
                f"{API_BASE_URL}/api/v1/financeiro/dashboard/resumo",
                headers=self.headers,
                timeout=API_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json()
                self.metrics_cache['financeiro'] = {
                    'saldo': f"R$ {data.get('saldo_atual', 0):,.2f}",
                    'receber': f"R$ {data.get('total_receber', 0):,.2f}",
                    'pagar': f"R$ {data.get('total_pagar', 0):,.2f}",
                    'vencidas': str(data.get('contas_vencidas', 0)),
                    'receitas': f"R$ {data.get('receitas_mes', 0):,.2f}",
                    'despesas': f"R$ {data.get('despesas_mes', 0):,.2f}",
                    'trend': '+8%'
                }
        except Exception as e:
            print(f"Erro ao buscar financeiro: {e}")
            self.metrics_cache['financeiro'] = {
                'saldo': 'R$ 0', 'receber': 'R$ 0', 'pagar': 'R$ 0',
                'vencidas': '0', 'receitas': 'R$ 0', 'despesas': 'R$ 0',
                'trend': '0%'
            }
    
    def fetch_comunicacao_metrics(self):
        """Buscar m√©tricas de Comunica√ß√£o"""
        try:
            response = requests.get(
                f"{API_BASE_URL}/api/v1/comunicacao/dashboard",
                headers=self.headers,
                timeout=API_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json()
                self.metrics_cache['comunicacao'] = {
                    'enviadas': str(data.get('comunicacoes_hoje', 0)),
                    'templates': str(data.get('total_templates', 0)),
                    'whatsapp': str(data.get('whatsapp_enviados', 0)),
                    'taxa_sucesso': f"{data.get('taxa_sucesso', 0)}%",
                    'trend': '+12%'
                }
        except Exception as e:
            print(f"Erro ao buscar comunica√ß√£o: {e}")
            self.metrics_cache['comunicacao'] = {
                'enviadas': '0', 'templates': '0', 'whatsapp': '0',
                'taxa_sucesso': '0%', 'trend': '0%'
            }
    
    def update_alerts(self):
        """Atualizar lista de alertas cr√≠ticos"""
        self.alerts = []
        
        # Verificar OS atrasadas
        os_atrasadas = int(self.get_cached_value('os', 'atrasadas', '0'))
        if os_atrasadas > 0:
            self.alerts.append({
                'message': f"{os_atrasadas} Ordens de Servi√ßo atrasadas",
                'type': 'danger'
            })
        
        # Verificar contas vencidas
        contas_vencidas = int(self.get_cached_value('financeiro', 'vencidas', '0'))
        if contas_vencidas > 0:
            self.alerts.append({
                'message': f"{contas_vencidas} contas financeiras vencidas",
                'type': 'warning'
            })
        
        # Verificar estoque baixo (simulado)
        if int(self.get_cached_value('estoque', 'baixo', '0')) > 0:
            self.alerts.append({
                'message': "Produtos com estoque baixo detectados",
                'type': 'warning'
            })
    
    def refresh_dashboard_display(self):
        """Atualizar exibi√ß√£o do dashboard com novos dados"""
        # Recriar o dashboard com dados atualizados
        self.show_dashboard()
    
    def start_auto_refresh(self):
        """Iniciar atualiza√ß√£o autom√°tica do dashboard"""
        def auto_refresh():
            self.load_dashboard_data()
            self.root.after(REFRESH_INTERVAL, auto_refresh)
        
        # Primeira atualiza√ß√£o ap√≥s 5 segundos
        self.root.after(5000, auto_refresh)
    
    # =======================================
    # M√âTODOS DE NAVEGA√á√ÉO
    # =======================================
    
    def open_ordem_servico(self):
        """Abrir m√≥dulo Ordem de Servi√ßo"""
        try:
            from ordem_servico_window import OrdemServicoWindow
            os_window = OrdemServicoWindow(self.root, self.token)
            os_window.run()
        except ImportError:
            messagebox.showinfo("Info", "M√≥dulo Ordem de Servi√ßo ser√° aberto")
    
    def open_agendamento(self):
        """Abrir m√≥dulo Agendamento"""
        try:
            from agendamento_window import AgendamentoWindow
            agend_window = AgendamentoWindow(self.root)
            agend_window.run()
        except ImportError:
            messagebox.showinfo("Info", "M√≥dulo Agendamento ser√° aberto")
    
    def open_financeiro(self):
        """Abrir m√≥dulo Financeiro"""
        try:
            from financeiro_window import FinanceiroWindow
            fin_window = FinanceiroWindow(self.root, self.token)
            fin_window.run()
        except ImportError:
            messagebox.showinfo("Info", "M√≥dulo Financeiro ser√° aberto")
    
    def open_comunicacao(self):
        """Abrir m√≥dulo Comunica√ß√£o"""
        try:
            from comunicacao_window import ComunicacaoWindow
            com_window = ComunicacaoWindow(self.root, self.token)
            com_window.run()
        except ImportError:
            messagebox.showinfo("Info", "M√≥dulo Comunica√ß√£o ser√° aberto")
    
    # =======================================
    # A√á√ïES R√ÅPIDAS
    # =======================================
    
    def quick_new_os(self):
        """A√ß√£o r√°pida: Nova OS"""
        messagebox.showinfo(ACTION_MESSAGES['title'], ACTION_MESSAGES['nova_os'])
    
    def quick_schedule(self):
        """A√ß√£o r√°pida: Agendar"""
        messagebox.showinfo(ACTION_MESSAGES['title'], ACTION_MESSAGES['novo_agendamento'])
    
    def quick_financial(self):
        """A√ß√£o r√°pida: Lan√ßamento financeiro"""
        messagebox.showinfo(ACTION_MESSAGES['title'], "Funcionalidade: Novo Lan√ßamento Financeiro")
    
    def quick_message(self):
        """A√ß√£o r√°pida: Enviar mensagem"""
        messagebox.showinfo(ACTION_MESSAGES['title'], "Funcionalidade: Enviar Comunica√ß√£o")
    
    def quick_report(self):
        """A√ß√£o r√°pida: Gerar relat√≥rio"""
        messagebox.showinfo(ACTION_MESSAGES['title'], "Funcionalidade: Gerar Relat√≥rio")
    
    # =======================================
    # M√âTODOS AUXILIARES
    # =======================================
    
    def clear_content(self):
        """Limpar √°rea de conte√∫do"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    
    def update_datetime(self):
        """Atualizar data/hora na barra superior"""
        
        now = datetime.now()
        datetime_str = now.strftime("%d/%m/%Y - %H:%M:%S")
        if hasattr(self, 'datetime_label'):
            self.datetime_label.config(text=datetime_str)
        
        # Agendar pr√≥xima atualiza√ß√£o
        self.root.after(1000, self.update_datetime)
    
    def darken_color(self, color):
        """Escurecer cor para efeito hover"""
        # Simples mapeamento de cores para vers√µes mais escuras
        color_map = {
            "#3498db": "#2980b9",
            "#2ecc71": "#27ae60",
            "#f39c12": "#e67e22",
            "#9b59b6": "#8e44ad",
            "#e67e22": "#d35400",
            "#1abc9c": "#16a085",
            "#95a5a6": "#7f8c8d",
            "#25d366": "#128c7e",
        }
        return color_map.get(color, color)
    
    # === M√âTODOS DE NAVEGA√á√ÉO ===
    
    def show_clients(self):
        """Mostrar m√≥dulo de clientes"""
        
        # Registrar navega√ß√£o
        if hasattr(self, 'nav_system'):
            self.nav_system.navigate_to('clientes', 'Clientes', {}, self.show_clients)
        
        try:
            # Usar lazy loading para carregar o m√≥dulo
            def create_clientes_module():
                from clientes_window import ClientesWindow
                return ClientesWindow
            
            # Registrar factory se n√£o existe
            if not erp_loader.is_registered('clientes'):
                erp_loader.register_factory('clientes', create_clientes_module)
            
            # Carregar m√≥dulo lazy
            clientes_class = erp_loader.get_module('clientes')
            clientes_class(self.user_data, self.root)
            
        except ImportError as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao carregar m√≥dulo de clientes: {e}"
            )
        except Exception as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao abrir clientes:\n{str(e)}"
            )
    
    def show_products(self):
        """Abrir janela de gerenciamento de produtos com lazy loading"""
        try:
            # Usar lazy loading para carregar o m√≥dulo
            def create_produtos_module():
                from produtos_window import ProdutosWindow
                return ProdutosWindow
            
            # Registrar factory se n√£o existe
            if not erp_loader.is_registered('produtos'):
                erp_loader.register_factory('produtos', create_produtos_module)
            
            # Carregar m√≥dulo lazy
            produtos_class = erp_loader.get_module('produtos')
            produtos_class(self.user_data, self.root)
            
        except Exception as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao abrir m√≥dulo de produtos:\n{str(e)}"
            )
    
    def show_estoque(self):
        """Abrir janela de controle de estoque"""
        try:
            from estoque_window import EstoqueWindow
            EstoqueWindow(self.user_data, self.root)
        except Exception as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao abrir controle de estoque:\n{str(e)}"
            )
    
    def show_codigo_barras(self):
        """Mostrar gerador de c√≥digos de barras"""
        try:
            from codigo_barras_window import CodigoBarrasWindow
            CodigoBarrasWindow(self.user_data, self.root)
        except Exception as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao abrir gerador de c√≥digos de barras:\n{str(e)}"
            )
    
    def show_orders(self):
        """Mostrar m√≥dulo de OS"""
        self.clear_content()
        
        title = tk.Label(
            self.content_frame,
            text="üìã Ordem de Servi√ßo",
            font=('Arial', 18, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title.pack(pady=20)
        
        info_label = tk.Label(
            self.content_frame,
            text="üöß M√≥dulo planejado para Fase 3",
            font=('Arial', 14),
            bg='white',
            fg='#7f8c8d'
        )
        info_label.pack(pady=10)
    
    def show_financial(self):
        """Mostrar m√≥dulo financeiro"""
        self.clear_content()
        
        title = tk.Label(
            self.content_frame,
            text="üí∞ M√≥dulo Financeiro",
            font=('Arial', 18, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title.pack(pady=20)
        
        info_label = tk.Label(
            self.content_frame,
            text="üöß M√≥dulo planejado para Fase 4",
            font=('Arial', 14),
            bg='white',
            fg='#7f8c8d'
        )
        info_label.pack(pady=10)
    
    def show_comunicacao(self):
        """Mostrar sistema de comunica√ß√£o"""
        try:
            from comunicacao_window import ComunicacaoWindow
            ComunicacaoWindow(self.root, self.token)
        except Exception as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao abrir sistema de comunica√ß√£o:\n{str(e)}"
            )
    
    def show_reports(self):
        """Mostrar m√≥dulo de relat√≥rios"""
        try:
            from relatorios_window import RelatoriosWindow
            RelatoriosWindow(self.user_data, self.root)
        except Exception as e:
            messagebox.showerror(
                "Erro",
                f"Erro ao abrir gerador de relat√≥rios:\n{str(e)}"
            )
    
    def show_settings(self):
        """Mostrar configura√ß√µes"""
        self.clear_content()
        
        title = tk.Label(
            self.content_frame,
            text="‚öôÔ∏è Configura√ß√µes",
            font=('Arial', 18, 'bold'),
            bg='white',
            fg='#2c3e50'
        )
        title.pack(pady=20)
        
        info_label = tk.Label(
            self.content_frame,
            text="üöß Painel de configura√ß√µes em desenvolvimento",
            font=('Arial', 14),
            bg='white',
            fg='#7f8c8d'
        )
        info_label.pack(pady=10)
    
    def logout(self):
        """Fazer logout do sistema"""
        
        result = messagebox.askyesno(
            "Confirmar Logout",
            "Deseja realmente sair do sistema?"
        )
        
        if result:
            self.root.quit()
    
    def on_closing(self):
        """Tratar fechamento da janela"""
        
        result = messagebox.askyesno(
            "Fechar Sistema",
            "Deseja realmente fechar o sistema?"
        )
        
        if result:
            self.root.quit()
    
    def run(self):
        """Executar o dashboard"""
        
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            pass
        finally:
            try:
                self.root.destroy()
            except Exception:
                pass

# =======================================
# APLICA√á√ÉO PRINCIPAL INTEGRADA
# =======================================

def main():
    """Fun√ß√£o principal que integra login + dashboard"""
    
    from login_tkinter import LoginWindow
    
    print("=" * 50)
    print("SISTEMA ERP PRIMOTEX - APLICA√á√ÉO COMPLETA")
    print("=" * 50)
    
    # 1. Tela de Login
    print("üîê Iniciando tela de login...")
    login_window = LoginWindow()
    user_data = login_window.run()
    
    if not user_data:
        print("‚ùå Login cancelado")
        return
    
    # 2. Dashboard Principal
    print("üìä Iniciando dashboard...")
    dashboard = DashboardWindow(user_data)
    dashboard.run()
    
    print("üëã Sistema encerrado")

if __name__ == "__main__":
    main()