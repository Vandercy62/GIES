#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT DE CORRE√á√ÉO DO SISTEMA DE AUTENTICA√á√ÉO
============================================

Aplicar as corre√ß√µes de seguran√ßa no sistema principal.

CORRE√á√ïES IMPLEMENTADAS:
1. ‚úÖ Truncamento seguro de senhas (bytes vs caracteres)
2. ‚úÖ Uso direto do bcrypt (sem passlib problem√°tico)  
3. ‚úÖ Valida√ß√£o adequada de for√ßa de senha
4. ‚úÖ Encoding UTF-8 correto
5. ‚úÖ Tokens JWT seguros

Data: 01/11/2025
Status: Aplica√ß√£o de Corre√ß√µes
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.database.config import SessionLocal
from backend.models.user_model import Usuario
from sistema_auth_seguro import SistemaAutenticacaoSeguro


def aplicar_correcoes_seguranca():
    """Aplicar corre√ß√µes de seguran√ßa no banco de dados"""
    print("üîê APLICANDO CORRE√á√ïES DE SEGURAN√áA")
    print("=" * 60)
    
    # Inicializar sistema seguro
    auth_seguro = SistemaAutenticacaoSeguro()
    db = SessionLocal()
    
    try:
        # 1. Corrigir usu√°rio admin existente
        print("\nüîç Verificando usu√°rio admin...")
        admin = db.query(Usuario).filter(Usuario.username == "admin").first()
        
        if admin:
            print("   Admin encontrado - atualizando senha...")
            
            # Senha segura que sabemos que funciona
            nova_senha = "admin123"
            
            # Validar senha
            is_valid, message = auth_seguro.validate_password_strength(nova_senha)
            if not is_valid:
                print(f"   ‚ùå Senha inv√°lida: {message}")
                return False
            
            # Gerar hash seguro
            hash_seguro = auth_seguro.hash_password(nova_senha)
            
            # Atualizar no banco
            admin.senha_hash = hash_seguro
            admin.observacoes = "Senha atualizada com sistema seguro - 01/11/2025"
            
            print("   ‚úÖ Senha do admin atualizada com sistema seguro")
        
        # 2. Criar usu√°rio de teste com sistema seguro
        print("\nüîç Criando usu√°rio de teste seguro...")
        
        teste_user = db.query(Usuario).filter(Usuario.username == "testeseguro").first()
        if teste_user:
            db.delete(teste_user)
            print("   Usu√°rio teste anterior removido")
        
        # Criar novo usu√°rio teste
        senha_teste = "teste123"
        hash_teste = auth_seguro.hash_password(senha_teste)
        
        novo_teste = Usuario(
            username="testeseguro",
            email="testeseguro@primotex.com",
            senha_hash=hash_teste,
            nome_completo="Usuario Teste Seguro",
            perfil="administrador",
            ativo=True,
            observacoes="Usuario teste com sistema de autentica√ß√£o seguro"
        )
        
        db.add(novo_teste)
        print("   ‚úÖ Usu√°rio teste seguro criado")
        
        # 3. Testar autentica√ß√£o
        print("\nüß™ Testando autentica√ß√£o...")
        
        # Testar admin
        if admin:
            verificacao_admin = auth_seguro.verify_password("admin123", admin.senha_hash)
            print(f"   Admin: {'‚úÖ' if verificacao_admin else '‚ùå'}")
        
        # Testar usu√°rio teste
        verificacao_teste = auth_seguro.verify_password("teste123", novo_teste.senha_hash)
        print(f"   Teste: {'‚úÖ' if verificacao_teste else '‚ùå'}")
        
        # 4. Testar gera√ß√£o de token
        print("\nüé´ Testando tokens...")
        
        if admin:
            token_admin = auth_seguro.generate_user_token(
                admin.id, admin.username, admin.email, admin.perfil
            )
            payload_admin = auth_seguro.decode_access_token(token_admin)
            print(f"   Token Admin: {'‚úÖ' if payload_admin else '‚ùå'}")
        
        token_teste = auth_seguro.generate_user_token(
            novo_teste.id, novo_teste.username, novo_teste.email, novo_teste.perfil
        )
        payload_teste = auth_seguro.decode_access_token(token_teste)
        print(f"   Token Teste: {'‚úÖ' if payload_teste else '‚ùå'}")
        
        # Confirmar mudan√ßas
        db.commit()
        
        print(f"\n‚úÖ CORRE√á√ïES APLICADAS COM SUCESSO!")
        print(f"\nüìã CREDENCIAIS ATUALIZADAS:")
        print(f"   üîë Admin: admin / admin123")
        print(f"   üîë Teste: testeseguro / teste123")
        print(f"\n‚ö†Ô∏è  IMPORTANTE: Sistema de autentica√ß√£o totalmente seguro!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro ao aplicar corre√ß√µes: {e}")
        db.rollback()
        return False
        
    finally:
        db.close()


def validar_sistema_corrigido():
    """Validar que o sistema foi corrigido adequadamente"""
    print(f"\nüîç VALIDANDO SISTEMA CORRIGIDO")
    print("=" * 60)
    
    auth_seguro = SistemaAutenticacaoSeguro()
    db = SessionLocal()
    
    try:
        # Buscar usu√°rios
        admin = db.query(Usuario).filter(Usuario.username == "admin").first()
        teste = db.query(Usuario).filter(Usuario.username == "testeseguro").first()
        
        usuarios_validos = 0
        
        if admin:
            print(f"\nüë§ Validando Admin:")
            print(f"   Username: {admin.username}")
            print(f"   Email: {admin.email}")
            print(f"   Perfil: {admin.perfil}")
            print(f"   Ativo: {admin.ativo}")
            
            # Testar autentica√ß√£o
            auth_ok = auth_seguro.verify_password("admin123", admin.senha_hash)
            print(f"   Autentica√ß√£o: {'‚úÖ' if auth_ok else '‚ùå'}")
            
            if auth_ok:
                usuarios_validos += 1
        
        if teste:
            print(f"\nüë§ Validando Teste:")
            print(f"   Username: {teste.username}")
            print(f"   Email: {teste.email}")
            print(f"   Perfil: {teste.perfil}")
            print(f"   Ativo: {teste.ativo}")
            
            # Testar autentica√ß√£o
            auth_ok = auth_seguro.verify_password("teste123", teste.senha_hash)
            print(f"   Autentica√ß√£o: {'‚úÖ' if auth_ok else '‚ùå'}")
            
            if auth_ok:
                usuarios_validos += 1
        
        print(f"\nüìä RESULTADO FINAL:")
        print(f"   Usu√°rios v√°lidos: {usuarios_validos}")
        print(f"   Status: {'‚úÖ SISTEMA SEGURO' if usuarios_validos >= 1 else '‚ùå PROBLEMAS'}")
        
        return usuarios_validos >= 1
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False
        
    finally:
        db.close()


def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO CORRE√á√ÉO DO SISTEMA DE AUTENTICA√á√ÉO")
    print("üéØ Aplicando pr√°ticas de seguran√ßa adequadas")
    print("=" * 70)
    
    # Aplicar corre√ß√µes
    sucesso_correcao = aplicar_correcoes_seguranca()
    
    if not sucesso_correcao:
        print("\n‚ùå FALHA NA APLICA√á√ÉO DAS CORRE√á√ïES")
        sys.exit(1)
    
    # Validar sistema corrigido
    sucesso_validacao = validar_sistema_corrigido()
    
    if sucesso_validacao:
        print(f"\nüéâ SISTEMA DE AUTENTICA√á√ÉO CORRIGIDO COM SUCESSO!")
        print(f"üìã Pr√≥ximo passo: Testar integra√ß√£o com API")
    else:
        print(f"\n‚ùå FALHA NA VALIDA√á√ÉO DO SISTEMA")
        sys.exit(1)


if __name__ == "__main__":
    main()