# 🏷️ Release Management - PRIMOTEX ERP Mobile
# Automatiza criação de releases e tags

name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string

defaults:
  run:
    working-directory: ./frontend/mobile

jobs:
  # 🔍 Validate release
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.current.outputs.version }}
      new-version: ${{ steps.version.outputs.new-version }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/mobile/package-lock.json

      - name: 📋 Get current version
        id: current
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📋 Current version: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: 🎯 Calculate new version
        id: version
        run: |
          CURRENT="${{ steps.current.outputs.version }}"
          INPUT_VERSION="${{ inputs.version }}"
          
          if [[ -n "$INPUT_VERSION" ]]; then
            NEW_VERSION="$INPUT_VERSION"
          else
            # Auto-increment based on release type
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ inputs.release_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎯 New version: $NEW_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Validate version format
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $NEW_VERSION"
            echo "Version must follow semantic versioning (x.y.z)"
            exit 1
          fi
          
          echo "✅ Version format is valid: $NEW_VERSION"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test -- --watchAll=false --passWithNoTests

      - name: 🔧 Validate build
        run: |
          npm install -g @expo/cli
          npx expo doctor

  # 📝 Generate changelog
  generate-changelog:
    name: 📝 Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          CURRENT_VERSION="${{ needs.validate-release.outputs.current-version }}"
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          # Get last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -z "$LAST_TAG" ]]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="$LAST_TAG..HEAD"
          fi
          
          # Generate changelog from commits
          CHANGELOG="## 🚀 What's New in v$NEW_VERSION

### 📱 Mobile App Changes
"
          
          # Get commits since last release
          COMMITS=$(git log $COMMIT_RANGE --oneline --grep="mobile" --grep="frontend/mobile" --grep="📱" --grep="🎯" --grep="✨" --grep="🐛" --grep="🔧" --no-merges)
          
          if [[ -n "$COMMITS" ]]; then
            CHANGELOG="$CHANGELOG
#### ✨ Features & Improvements
"
            echo "$COMMITS" | grep -E "(✨|🎯|📱)" | while read -r commit; do
              CHANGELOG="$CHANGELOG
- ${commit#* }"
            done
            
            CHANGELOG="$CHANGELOG

#### 🐛 Bug Fixes
"
            echo "$COMMITS" | grep "🐛" | while read -r commit; do
              CHANGELOG="$CHANGELOG
- ${commit#* }"
            done
            
            CHANGELOG="$CHANGELOG

#### 🔧 Technical Improvements
"
            echo "$COMMITS" | grep -E "(🔧|♻️|⚡|🏗️)" | while read -r commit; do
              CHANGELOG="$CHANGELOG
- ${commit#* }"
            done
          else
            CHANGELOG="$CHANGELOG
- Internal improvements and optimizations
- Enhanced stability and performance
"
          fi
          
          # Add custom release notes if provided
          if [[ -n "${{ inputs.release_notes }}" ]]; then
            CHANGELOG="$CHANGELOG

### 📋 Release Notes
${{ inputs.release_notes }}"
          fi
          
          CHANGELOG="$CHANGELOG

### 📱 Installation
- **iOS**: Available on the App Store
- **Android**: Available on Google Play Store

### 🆘 Support
- Report issues: [GitHub Issues](https://github.com/Vandercy62/GIES/issues)
- Contact: suporte@primotex.com

---
*Released on $(date +'%Y-%m-%d')*"
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Add to step summary
          echo "$CHANGELOG" >> $GITHUB_STEP_SUMMARY

  # 🔄 Update version
  update-version:
    name: 🔄 Update Version
    runs-on: ubuntu-latest
    needs: [validate-release, generate-changelog]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/mobile/package-lock.json

      - name: 🔄 Update package.json
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "✅ Updated package.json to version $NEW_VERSION"

      - name: 🔄 Update app.json
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          # Update app.json with new version
          node -e "
            const fs = require('fs');
            const app = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            app.expo.version = '$NEW_VERSION';
            fs.writeFileSync('app.json', JSON.stringify(app, null, 2));
          "
          
          echo "✅ Updated app.json to version $NEW_VERSION"

      - name: 📝 Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          CHANGELOG="${{ needs.generate-changelog.outputs.changelog }}"
          
          # Create or update CHANGELOG.md
          if [[ -f "CHANGELOG.md" ]]; then
            # Prepend new changelog to existing file
            echo "$CHANGELOG" > temp_changelog.md
            echo "" >> temp_changelog.md
            cat CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            # Create new CHANGELOG.md
            echo "# 📱 PRIMOTEX ERP Mobile - Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "$CHANGELOG" >> CHANGELOG.md
          fi
          
          echo "✅ Updated CHANGELOG.md"

      - name: 💾 Commit changes
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          git add package.json package-lock.json app.json CHANGELOG.md
          git commit -m "🔖 Release v$NEW_VERSION

- Updated version to $NEW_VERSION
- Generated changelog
- Updated app configuration

[skip ci]"
          
          git push origin main

  # 🏷️ Create release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, generate-changelog, update-version]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 🏷️ Create Git tag
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          git tag -a "mobile-v$NEW_VERSION" -m "Mobile app release v$NEW_VERSION"
          git push origin "mobile-v$NEW_VERSION"

      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: mobile-v${{ needs.validate-release.outputs.new-version }}
          release_name: 📱 PRIMOTEX ERP Mobile v${{ needs.validate-release.outputs.new-version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ inputs.prerelease }}

      - name: 📊 Release summary
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          echo "# 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: mobile-v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile CD pipeline will automatically trigger" >> $GITHUB_STEP_SUMMARY
          echo "- Apps will be built and submitted to stores" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor the deployment progress" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Release URL**: https://github.com/Vandercy62/GIES/releases/tag/mobile-v$NEW_VERSION"

  # 🔔 Trigger deployment
  trigger-deployment:
    name: 🔔 Trigger Deployment
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
      - name: 🚀 Trigger Mobile CD
        uses: actions/github-script@v6
        with:
          script: |
            const NEW_VERSION = "${{ needs.validate-release.outputs.new-version }}";
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'mobile-cd.yml',
              ref: `mobile-v${NEW_VERSION}`,
              inputs: {
                environment: 'production',
                platform: 'all'
              }
            });
            
            console.log(`🚀 Triggered Mobile CD for v${NEW_VERSION}`);

      - name: 📢 Notify team
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          echo "🎉 **PRIMOTEX ERP Mobile v$NEW_VERSION Released!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The mobile CD pipeline has been triggered automatically." >> $GITHUB_STEP_SUMMARY
          echo "Monitor the deployment at: https://github.com/Vandercy62/GIES/actions" >> $GITHUB_STEP_SUMMARY